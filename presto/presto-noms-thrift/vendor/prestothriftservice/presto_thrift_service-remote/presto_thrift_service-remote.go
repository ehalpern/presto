// Autogenerated by Thrift Compiler (1.0.0-dev)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package main

import (
        "context"
        "flag"
        "fmt"
        "math"
        "net"
        "net/url"
        "os"
        "strconv"
        "strings"
        "git.apache.org/thrift.git/lib/go/thrift"
        "prestothriftservice"
)


func Usage() {
  fmt.Fprintln(os.Stderr, "Usage of ", os.Args[0], " [-h host:port] [-u url] [-f[ramed]] function [arg1 [arg2...]]:")
  flag.PrintDefaults()
  fmt.Fprintln(os.Stderr, "\nFunctions:")
  fmt.Fprintln(os.Stderr, "   prestoListSchemaNames()")
  fmt.Fprintln(os.Stderr, "   prestoListTables(PrestoThriftNullableSchemaName schemaNameOrNull)")
  fmt.Fprintln(os.Stderr, "  PrestoThriftNullableTableMetadata prestoGetTableMetadata(PrestoThriftSchemaTableName schemaTableName)")
  fmt.Fprintln(os.Stderr, "  PrestoThriftSplitBatch prestoGetSplits(PrestoThriftSchemaTableName schemaTableName, PrestoThriftNullableColumnSet desiredColumns, PrestoThriftTupleDomain outputConstraint, i32 maxSplitCount, PrestoThriftNullableToken nextToken)")
  fmt.Fprintln(os.Stderr, "  PrestoThriftPageResult prestoGetRows(PrestoThriftId splitId,  columns, i64 maxBytes, PrestoThriftNullableToken nextToken)")
  fmt.Fprintln(os.Stderr)
  os.Exit(0)
}

func main() {
  flag.Usage = Usage
  var host string
  var port int
  var protocol string
  var urlString string
  var framed bool
  var useHttp bool
  var parsedUrl url.URL
  var trans thrift.TTransport
  _ = strconv.Atoi
  _ = math.Abs
  flag.Usage = Usage
  flag.StringVar(&host, "h", "localhost", "Specify host and port")
  flag.IntVar(&port, "p", 9090, "Specify port")
  flag.StringVar(&protocol, "P", "binary", "Specify the protocol (binary, compact, simplejson, json)")
  flag.StringVar(&urlString, "u", "", "Specify the url")
  flag.BoolVar(&framed, "framed", false, "Use framed transport")
  flag.BoolVar(&useHttp, "http", false, "Use http")
  flag.Parse()

  if len(urlString) > 0 {
    parsedUrl, err := url.Parse(urlString)
    if err != nil {
      fmt.Fprintln(os.Stderr, "Error parsing URL: ", err)
      flag.Usage()
    }
    host = parsedUrl.Host
    useHttp = len(parsedUrl.Scheme) <= 0 || parsedUrl.Scheme == "http"
  } else if useHttp {
    _, err := url.Parse(fmt.Sprint("http://", host, ":", port))
    if err != nil {
      fmt.Fprintln(os.Stderr, "Error parsing URL: ", err)
      flag.Usage()
    }
  }

  cmd := flag.Arg(0)
  var err error
  if useHttp {
    trans, err = thrift.NewTHttpClient(parsedUrl.String())
  } else {
    portStr := fmt.Sprint(port)
    if strings.Contains(host, ":") {
           host, portStr, err = net.SplitHostPort(host)
           if err != nil {
                   fmt.Fprintln(os.Stderr, "error with host:", err)
                   os.Exit(1)
           }
    }
    trans, err = thrift.NewTSocket(net.JoinHostPort(host, portStr))
    if err != nil {
      fmt.Fprintln(os.Stderr, "error resolving address:", err)
      os.Exit(1)
    }
    if framed {
      trans = thrift.NewTFramedTransport(trans)
    }
  }
  if err != nil {
    fmt.Fprintln(os.Stderr, "Error creating transport", err)
    os.Exit(1)
  }
  defer trans.Close()
  var protocolFactory thrift.TProtocolFactory
  switch protocol {
  case "compact":
    protocolFactory = thrift.NewTCompactProtocolFactory()
    break
  case "simplejson":
    protocolFactory = thrift.NewTSimpleJSONProtocolFactory()
    break
  case "json":
    protocolFactory = thrift.NewTJSONProtocolFactory()
    break
  case "binary", "":
    protocolFactory = thrift.NewTBinaryProtocolFactoryDefault()
    break
  default:
    fmt.Fprintln(os.Stderr, "Invalid protocol specified: ", protocol)
    Usage()
    os.Exit(1)
  }
  client := prestothriftservice.NewPrestoThriftServiceClientFactory(trans, protocolFactory)
  if err := trans.Open(); err != nil {
    fmt.Fprintln(os.Stderr, "Error opening socket to ", host, ":", port, " ", err)
    os.Exit(1)
  }

  switch cmd {
  case "prestoListSchemaNames":
    if flag.NArg() - 1 != 0 {
      fmt.Fprintln(os.Stderr, "PrestoListSchemaNames requires 0 args")
      flag.Usage()
    }
    fmt.Print(client.PrestoListSchemaNames(context.Background()))
    fmt.Print("\n")
    break
  case "prestoListTables":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "PrestoListTables requires 1 args")
      flag.Usage()
    }
    arg44 := flag.Arg(1)
    mbTrans45 := thrift.NewTMemoryBufferLen(len(arg44))
    defer mbTrans45.Close()
    _, err46 := mbTrans45.WriteString(arg44)
    if err46 != nil {
      Usage()
      return
    }
    factory47 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt48 := factory47.GetProtocol(mbTrans45)
    argvalue0 := prestothriftservice.NewPrestoThriftNullableSchemaName()
    err49 := argvalue0.Read(jsProt48)
    if err49 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.PrestoListTables(context.Background(), value0))
    fmt.Print("\n")
    break
  case "prestoGetTableMetadata":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "PrestoGetTableMetadata requires 1 args")
      flag.Usage()
    }
    arg50 := flag.Arg(1)
    mbTrans51 := thrift.NewTMemoryBufferLen(len(arg50))
    defer mbTrans51.Close()
    _, err52 := mbTrans51.WriteString(arg50)
    if err52 != nil {
      Usage()
      return
    }
    factory53 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt54 := factory53.GetProtocol(mbTrans51)
    argvalue0 := prestothriftservice.NewPrestoThriftSchemaTableName()
    err55 := argvalue0.Read(jsProt54)
    if err55 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.PrestoGetTableMetadata(context.Background(), value0))
    fmt.Print("\n")
    break
  case "prestoGetSplits":
    if flag.NArg() - 1 != 5 {
      fmt.Fprintln(os.Stderr, "PrestoGetSplits requires 5 args")
      flag.Usage()
    }
    arg56 := flag.Arg(1)
    mbTrans57 := thrift.NewTMemoryBufferLen(len(arg56))
    defer mbTrans57.Close()
    _, err58 := mbTrans57.WriteString(arg56)
    if err58 != nil {
      Usage()
      return
    }
    factory59 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt60 := factory59.GetProtocol(mbTrans57)
    argvalue0 := prestothriftservice.NewPrestoThriftSchemaTableName()
    err61 := argvalue0.Read(jsProt60)
    if err61 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg62 := flag.Arg(2)
    mbTrans63 := thrift.NewTMemoryBufferLen(len(arg62))
    defer mbTrans63.Close()
    _, err64 := mbTrans63.WriteString(arg62)
    if err64 != nil {
      Usage()
      return
    }
    factory65 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt66 := factory65.GetProtocol(mbTrans63)
    argvalue1 := prestothriftservice.NewPrestoThriftNullableColumnSet()
    err67 := argvalue1.Read(jsProt66)
    if err67 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    arg68 := flag.Arg(3)
    mbTrans69 := thrift.NewTMemoryBufferLen(len(arg68))
    defer mbTrans69.Close()
    _, err70 := mbTrans69.WriteString(arg68)
    if err70 != nil {
      Usage()
      return
    }
    factory71 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt72 := factory71.GetProtocol(mbTrans69)
    argvalue2 := prestothriftservice.NewPrestoThriftTupleDomain()
    err73 := argvalue2.Read(jsProt72)
    if err73 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    tmp3, err74 := (strconv.Atoi(flag.Arg(4)))
    if err74 != nil {
      Usage()
      return
    }
    argvalue3 := int32(tmp3)
    value3 := argvalue3
    arg75 := flag.Arg(5)
    mbTrans76 := thrift.NewTMemoryBufferLen(len(arg75))
    defer mbTrans76.Close()
    _, err77 := mbTrans76.WriteString(arg75)
    if err77 != nil {
      Usage()
      return
    }
    factory78 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt79 := factory78.GetProtocol(mbTrans76)
    argvalue4 := prestothriftservice.NewPrestoThriftNullableToken()
    err80 := argvalue4.Read(jsProt79)
    if err80 != nil {
      Usage()
      return
    }
    value4 := argvalue4
    fmt.Print(client.PrestoGetSplits(context.Background(), value0, value1, value2, value3, value4))
    fmt.Print("\n")
    break
  case "prestoGetRows":
    if flag.NArg() - 1 != 4 {
      fmt.Fprintln(os.Stderr, "PrestoGetRows requires 4 args")
      flag.Usage()
    }
    arg81 := flag.Arg(1)
    mbTrans82 := thrift.NewTMemoryBufferLen(len(arg81))
    defer mbTrans82.Close()
    _, err83 := mbTrans82.WriteString(arg81)
    if err83 != nil {
      Usage()
      return
    }
    factory84 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt85 := factory84.GetProtocol(mbTrans82)
    argvalue0 := prestothriftservice.NewPrestoThriftId()
    err86 := argvalue0.Read(jsProt85)
    if err86 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg87 := flag.Arg(2)
    mbTrans88 := thrift.NewTMemoryBufferLen(len(arg87))
    defer mbTrans88.Close()
    _, err89 := mbTrans88.WriteString(arg87)
    if err89 != nil {
      Usage()
      return
    }
    factory90 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt91 := factory90.GetProtocol(mbTrans88)
    containerStruct1 := prestothriftservice.NewPrestoThriftServicePrestoGetRowsArgs()
    err92 := containerStruct1.ReadField2(jsProt91)
    if err92 != nil {
      Usage()
      return
    }
    argvalue1 := containerStruct1.Columns
    value1 := argvalue1
    argvalue2, err93 := (strconv.ParseInt(flag.Arg(3), 10, 64))
    if err93 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    arg94 := flag.Arg(4)
    mbTrans95 := thrift.NewTMemoryBufferLen(len(arg94))
    defer mbTrans95.Close()
    _, err96 := mbTrans95.WriteString(arg94)
    if err96 != nil {
      Usage()
      return
    }
    factory97 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt98 := factory97.GetProtocol(mbTrans95)
    argvalue3 := prestothriftservice.NewPrestoThriftNullableToken()
    err99 := argvalue3.Read(jsProt98)
    if err99 != nil {
      Usage()
      return
    }
    value3 := argvalue3
    fmt.Print(client.PrestoGetRows(context.Background(), value0, value1, value2, value3))
    fmt.Print("\n")
    break
  case "":
    Usage()
    break
  default:
    fmt.Fprintln(os.Stderr, "Invalid function ", cmd)
  }
}
