// Autogenerated by Thrift Compiler (1.0.0-dev)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package prestothriftservice

import (
	"bytes"
	"reflect"
	"database/sql/driver"
	"errors"
	"context"
	"fmt"
	"git.apache.org/thrift.git/lib/go/thrift"
)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = context.Background
var _ = reflect.DeepEqual
var _ = bytes.Equal

type PrestoThriftBound int64
const (
  PrestoThriftBound_BELOW PrestoThriftBound = 1
  PrestoThriftBound_EXACTLY PrestoThriftBound = 2
  PrestoThriftBound_ABOVE PrestoThriftBound = 3
)

func (p PrestoThriftBound) String() string {
  switch p {
  case PrestoThriftBound_BELOW: return "BELOW"
  case PrestoThriftBound_EXACTLY: return "EXACTLY"
  case PrestoThriftBound_ABOVE: return "ABOVE"
  }
  return "<UNSET>"
}

func PrestoThriftBoundFromString(s string) (PrestoThriftBound, error) {
  switch s {
  case "BELOW": return PrestoThriftBound_BELOW, nil
  case "EXACTLY": return PrestoThriftBound_EXACTLY, nil
  case "ABOVE": return PrestoThriftBound_ABOVE, nil
  }
  return PrestoThriftBound(0), fmt.Errorf("not a valid PrestoThriftBound string")
}


func PrestoThriftBoundPtr(v PrestoThriftBound) *PrestoThriftBound { return &v }

func (p PrestoThriftBound) MarshalText() ([]byte, error) {
return []byte(p.String()), nil
}

func (p *PrestoThriftBound) UnmarshalText(text []byte) error {
q, err := PrestoThriftBoundFromString(string(text))
if (err != nil) {
return err
}
*p = q
return nil
}

func (p *PrestoThriftBound) Scan(value interface{}) error {
v, ok := value.(int64)
if !ok {
return errors.New("Scan value is not int64")
}
*p = PrestoThriftBound(v)
return nil
}

func (p * PrestoThriftBound) Value() (driver.Value, error) {
  if p == nil {
    return nil, nil
  }
return int64(*p), nil
}
// Attributes:
//  - Message
//  - Retryable
type PrestoThriftServiceException struct {
  Message string `thrift:"message,1" db:"message" json:"message"`
  Retryable bool `thrift:"retryable,2" db:"retryable" json:"retryable"`
}

func NewPrestoThriftServiceException() *PrestoThriftServiceException {
  return &PrestoThriftServiceException{}
}


func (p *PrestoThriftServiceException) GetMessage() string {
  return p.Message
}

func (p *PrestoThriftServiceException) GetRetryable() bool {
  return p.Retryable
}
func (p *PrestoThriftServiceException) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *PrestoThriftServiceException)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Message = v
}
  return nil
}

func (p *PrestoThriftServiceException)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Retryable = v
}
  return nil
}

func (p *PrestoThriftServiceException) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("PrestoThriftServiceException"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *PrestoThriftServiceException) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("message", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:message: ", p), err) }
  if err := oprot.WriteString(string(p.Message)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.message (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:message: ", p), err) }
  return err
}

func (p *PrestoThriftServiceException) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("retryable", thrift.BOOL, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:retryable: ", p), err) }
  if err := oprot.WriteBool(bool(p.Retryable)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.retryable (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:retryable: ", p), err) }
  return err
}

func (p *PrestoThriftServiceException) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("PrestoThriftServiceException(%+v)", *p)
}

func (p *PrestoThriftServiceException) Error() string {
  return p.String()
}

// Attributes:
//  - SchemaName
type PrestoThriftNullableSchemaName struct {
  SchemaName *string `thrift:"schemaName,1" db:"schemaName" json:"schemaName,omitempty"`
}

func NewPrestoThriftNullableSchemaName() *PrestoThriftNullableSchemaName {
  return &PrestoThriftNullableSchemaName{}
}

var PrestoThriftNullableSchemaName_SchemaName_DEFAULT string
func (p *PrestoThriftNullableSchemaName) GetSchemaName() string {
  if !p.IsSetSchemaName() {
    return PrestoThriftNullableSchemaName_SchemaName_DEFAULT
  }
return *p.SchemaName
}
func (p *PrestoThriftNullableSchemaName) IsSetSchemaName() bool {
  return p.SchemaName != nil
}

func (p *PrestoThriftNullableSchemaName) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *PrestoThriftNullableSchemaName)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.SchemaName = &v
}
  return nil
}

func (p *PrestoThriftNullableSchemaName) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("PrestoThriftNullableSchemaName"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *PrestoThriftNullableSchemaName) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetSchemaName() {
    if err := oprot.WriteFieldBegin("schemaName", thrift.STRING, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:schemaName: ", p), err) }
    if err := oprot.WriteString(string(*p.SchemaName)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.schemaName (1) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:schemaName: ", p), err) }
  }
  return err
}

func (p *PrestoThriftNullableSchemaName) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("PrestoThriftNullableSchemaName(%+v)", *p)
}

// Attributes:
//  - SchemaName
//  - TableName
type PrestoThriftSchemaTableName struct {
  SchemaName string `thrift:"schemaName,1" db:"schemaName" json:"schemaName"`
  TableName string `thrift:"tableName,2" db:"tableName" json:"tableName"`
}

func NewPrestoThriftSchemaTableName() *PrestoThriftSchemaTableName {
  return &PrestoThriftSchemaTableName{}
}


func (p *PrestoThriftSchemaTableName) GetSchemaName() string {
  return p.SchemaName
}

func (p *PrestoThriftSchemaTableName) GetTableName() string {
  return p.TableName
}
func (p *PrestoThriftSchemaTableName) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *PrestoThriftSchemaTableName)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.SchemaName = v
}
  return nil
}

func (p *PrestoThriftSchemaTableName)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.TableName = v
}
  return nil
}

func (p *PrestoThriftSchemaTableName) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("PrestoThriftSchemaTableName"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *PrestoThriftSchemaTableName) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("schemaName", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:schemaName: ", p), err) }
  if err := oprot.WriteString(string(p.SchemaName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.schemaName (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:schemaName: ", p), err) }
  return err
}

func (p *PrestoThriftSchemaTableName) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("tableName", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:tableName: ", p), err) }
  if err := oprot.WriteString(string(p.TableName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.tableName (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:tableName: ", p), err) }
  return err
}

func (p *PrestoThriftSchemaTableName) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("PrestoThriftSchemaTableName(%+v)", *p)
}

// Attributes:
//  - Name
//  - Type
//  - Comment
//  - Hidden
type PrestoThriftColumnMetadata struct {
  Name string `thrift:"name,1" db:"name" json:"name"`
  Type string `thrift:"type,2" db:"type" json:"type"`
  Comment *string `thrift:"comment,3" db:"comment" json:"comment,omitempty"`
  Hidden bool `thrift:"hidden,4" db:"hidden" json:"hidden"`
}

func NewPrestoThriftColumnMetadata() *PrestoThriftColumnMetadata {
  return &PrestoThriftColumnMetadata{}
}


func (p *PrestoThriftColumnMetadata) GetName() string {
  return p.Name
}

func (p *PrestoThriftColumnMetadata) GetType() string {
  return p.Type
}
var PrestoThriftColumnMetadata_Comment_DEFAULT string
func (p *PrestoThriftColumnMetadata) GetComment() string {
  if !p.IsSetComment() {
    return PrestoThriftColumnMetadata_Comment_DEFAULT
  }
return *p.Comment
}

func (p *PrestoThriftColumnMetadata) GetHidden() bool {
  return p.Hidden
}
func (p *PrestoThriftColumnMetadata) IsSetComment() bool {
  return p.Comment != nil
}

func (p *PrestoThriftColumnMetadata) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *PrestoThriftColumnMetadata)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Name = v
}
  return nil
}

func (p *PrestoThriftColumnMetadata)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Type = v
}
  return nil
}

func (p *PrestoThriftColumnMetadata)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Comment = &v
}
  return nil
}

func (p *PrestoThriftColumnMetadata)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.Hidden = v
}
  return nil
}

func (p *PrestoThriftColumnMetadata) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("PrestoThriftColumnMetadata"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *PrestoThriftColumnMetadata) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("name", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:name: ", p), err) }
  if err := oprot.WriteString(string(p.Name)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.name (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:name: ", p), err) }
  return err
}

func (p *PrestoThriftColumnMetadata) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("type", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:type: ", p), err) }
  if err := oprot.WriteString(string(p.Type)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.type (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:type: ", p), err) }
  return err
}

func (p *PrestoThriftColumnMetadata) writeField3(oprot thrift.TProtocol) (err error) {
  if p.IsSetComment() {
    if err := oprot.WriteFieldBegin("comment", thrift.STRING, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:comment: ", p), err) }
    if err := oprot.WriteString(string(*p.Comment)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.comment (3) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:comment: ", p), err) }
  }
  return err
}

func (p *PrestoThriftColumnMetadata) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("hidden", thrift.BOOL, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:hidden: ", p), err) }
  if err := oprot.WriteBool(bool(p.Hidden)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.hidden (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:hidden: ", p), err) }
  return err
}

func (p *PrestoThriftColumnMetadata) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("PrestoThriftColumnMetadata(%+v)", *p)
}

// Attributes:
//  - Columns
type PrestoThriftNullableColumnSet struct {
  Columns []string `thrift:"columns,1" db:"columns" json:"columns,omitempty"`
}

func NewPrestoThriftNullableColumnSet() *PrestoThriftNullableColumnSet {
  return &PrestoThriftNullableColumnSet{}
}

var PrestoThriftNullableColumnSet_Columns_DEFAULT []string

func (p *PrestoThriftNullableColumnSet) GetColumns() []string {
  return p.Columns
}
func (p *PrestoThriftNullableColumnSet) IsSetColumns() bool {
  return p.Columns != nil
}

func (p *PrestoThriftNullableColumnSet) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.SET {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *PrestoThriftNullableColumnSet)  ReadField1(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadSetBegin()
  if err != nil {
    return thrift.PrependError("error reading set begin: ", err)
  }
  tSet := make([]string, 0, size)
  p.Columns =  tSet
  for i := 0; i < size; i ++ {
var _elem0 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem0 = v
}
    p.Columns = append(p.Columns, _elem0)
  }
  if err := iprot.ReadSetEnd(); err != nil {
    return thrift.PrependError("error reading set end: ", err)
  }
  return nil
}

func (p *PrestoThriftNullableColumnSet) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("PrestoThriftNullableColumnSet"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *PrestoThriftNullableColumnSet) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetColumns() {
    if err := oprot.WriteFieldBegin("columns", thrift.SET, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:columns: ", p), err) }
    if err := oprot.WriteSetBegin(thrift.STRING, len(p.Columns)); err != nil {
      return thrift.PrependError("error writing set begin: ", err)
    }
    for i := 0; i<len(p.Columns); i++ {
      for j := i+1; j<len(p.Columns); j++ {
        if reflect.DeepEqual(p.Columns[i],p.Columns[j]) {
          return thrift.PrependError("", fmt.Errorf("%T error writing set field: slice is not unique", p.Columns[i]))
        }
      }
    }
    for _, v := range p.Columns {
      if err := oprot.WriteString(string(v)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    }
    if err := oprot.WriteSetEnd(); err != nil {
      return thrift.PrependError("error writing set end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:columns: ", p), err) }
  }
  return err
}

func (p *PrestoThriftNullableColumnSet) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("PrestoThriftNullableColumnSet(%+v)", *p)
}

// Set that either includes all values, or excludes all values.
//
// Attributes:
//  - All
type PrestoThriftAllOrNoneValueSet struct {
  All bool `thrift:"all,1" db:"all" json:"all"`
}

func NewPrestoThriftAllOrNoneValueSet() *PrestoThriftAllOrNoneValueSet {
  return &PrestoThriftAllOrNoneValueSet{}
}


func (p *PrestoThriftAllOrNoneValueSet) GetAll() bool {
  return p.All
}
func (p *PrestoThriftAllOrNoneValueSet) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *PrestoThriftAllOrNoneValueSet)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.All = v
}
  return nil
}

func (p *PrestoThriftAllOrNoneValueSet) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("PrestoThriftAllOrNoneValueSet"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *PrestoThriftAllOrNoneValueSet) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("all", thrift.BOOL, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:all: ", p), err) }
  if err := oprot.WriteBool(bool(p.All)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.all (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:all: ", p), err) }
  return err
}

func (p *PrestoThriftAllOrNoneValueSet) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("PrestoThriftAllOrNoneValueSet(%+v)", *p)
}

// Elements of {@code nulls} array determine if a value for a corresponding row is null.
// Elements of {@code ints} array are values for each row. If row is null then value is ignored.
//
// Attributes:
//  - Nulls
//  - Ints
type PrestoThriftInteger struct {
  Nulls []bool `thrift:"nulls,1" db:"nulls" json:"nulls,omitempty"`
  Ints []int32 `thrift:"ints,2" db:"ints" json:"ints,omitempty"`
}

func NewPrestoThriftInteger() *PrestoThriftInteger {
  return &PrestoThriftInteger{}
}

var PrestoThriftInteger_Nulls_DEFAULT []bool

func (p *PrestoThriftInteger) GetNulls() []bool {
  return p.Nulls
}
var PrestoThriftInteger_Ints_DEFAULT []int32

func (p *PrestoThriftInteger) GetInts() []int32 {
  return p.Ints
}
func (p *PrestoThriftInteger) IsSetNulls() bool {
  return p.Nulls != nil
}

func (p *PrestoThriftInteger) IsSetInts() bool {
  return p.Ints != nil
}

func (p *PrestoThriftInteger) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *PrestoThriftInteger)  ReadField1(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]bool, 0, size)
  p.Nulls =  tSlice
  for i := 0; i < size; i ++ {
var _elem1 bool
    if v, err := iprot.ReadBool(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem1 = v
}
    p.Nulls = append(p.Nulls, _elem1)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *PrestoThriftInteger)  ReadField2(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]int32, 0, size)
  p.Ints =  tSlice
  for i := 0; i < size; i ++ {
var _elem2 int32
    if v, err := iprot.ReadI32(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem2 = v
}
    p.Ints = append(p.Ints, _elem2)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *PrestoThriftInteger) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("PrestoThriftInteger"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *PrestoThriftInteger) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetNulls() {
    if err := oprot.WriteFieldBegin("nulls", thrift.LIST, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:nulls: ", p), err) }
    if err := oprot.WriteListBegin(thrift.BOOL, len(p.Nulls)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.Nulls {
      if err := oprot.WriteBool(bool(v)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:nulls: ", p), err) }
  }
  return err
}

func (p *PrestoThriftInteger) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetInts() {
    if err := oprot.WriteFieldBegin("ints", thrift.LIST, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:ints: ", p), err) }
    if err := oprot.WriteListBegin(thrift.I32, len(p.Ints)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.Ints {
      if err := oprot.WriteI32(int32(v)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:ints: ", p), err) }
  }
  return err
}

func (p *PrestoThriftInteger) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("PrestoThriftInteger(%+v)", *p)
}

// Elements of {@code nulls} array determine if a value for a corresponding row is null.
// Elements of {@code longs} array are values for each row. If row is null then value is ignored.
//
// Attributes:
//  - Nulls
//  - Longs
type PrestoThriftBigint struct {
  Nulls []bool `thrift:"nulls,1" db:"nulls" json:"nulls,omitempty"`
  Longs []int64 `thrift:"longs,2" db:"longs" json:"longs,omitempty"`
}

func NewPrestoThriftBigint() *PrestoThriftBigint {
  return &PrestoThriftBigint{}
}

var PrestoThriftBigint_Nulls_DEFAULT []bool

func (p *PrestoThriftBigint) GetNulls() []bool {
  return p.Nulls
}
var PrestoThriftBigint_Longs_DEFAULT []int64

func (p *PrestoThriftBigint) GetLongs() []int64 {
  return p.Longs
}
func (p *PrestoThriftBigint) IsSetNulls() bool {
  return p.Nulls != nil
}

func (p *PrestoThriftBigint) IsSetLongs() bool {
  return p.Longs != nil
}

func (p *PrestoThriftBigint) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *PrestoThriftBigint)  ReadField1(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]bool, 0, size)
  p.Nulls =  tSlice
  for i := 0; i < size; i ++ {
var _elem3 bool
    if v, err := iprot.ReadBool(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem3 = v
}
    p.Nulls = append(p.Nulls, _elem3)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *PrestoThriftBigint)  ReadField2(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]int64, 0, size)
  p.Longs =  tSlice
  for i := 0; i < size; i ++ {
var _elem4 int64
    if v, err := iprot.ReadI64(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem4 = v
}
    p.Longs = append(p.Longs, _elem4)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *PrestoThriftBigint) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("PrestoThriftBigint"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *PrestoThriftBigint) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetNulls() {
    if err := oprot.WriteFieldBegin("nulls", thrift.LIST, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:nulls: ", p), err) }
    if err := oprot.WriteListBegin(thrift.BOOL, len(p.Nulls)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.Nulls {
      if err := oprot.WriteBool(bool(v)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:nulls: ", p), err) }
  }
  return err
}

func (p *PrestoThriftBigint) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetLongs() {
    if err := oprot.WriteFieldBegin("longs", thrift.LIST, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:longs: ", p), err) }
    if err := oprot.WriteListBegin(thrift.I64, len(p.Longs)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.Longs {
      if err := oprot.WriteI64(int64(v)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:longs: ", p), err) }
  }
  return err
}

func (p *PrestoThriftBigint) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("PrestoThriftBigint(%+v)", *p)
}

// Elements of {@code nulls} array determine if a value for a corresponding row is null.
// Elements of {@code doubles} array are values for each row. If row is null then value is ignored.
//
// Attributes:
//  - Nulls
//  - Doubles
type PrestoThriftDouble struct {
  Nulls []bool `thrift:"nulls,1" db:"nulls" json:"nulls,omitempty"`
  Doubles []float64 `thrift:"doubles,2" db:"doubles" json:"doubles,omitempty"`
}

func NewPrestoThriftDouble() *PrestoThriftDouble {
  return &PrestoThriftDouble{}
}

var PrestoThriftDouble_Nulls_DEFAULT []bool

func (p *PrestoThriftDouble) GetNulls() []bool {
  return p.Nulls
}
var PrestoThriftDouble_Doubles_DEFAULT []float64

func (p *PrestoThriftDouble) GetDoubles() []float64 {
  return p.Doubles
}
func (p *PrestoThriftDouble) IsSetNulls() bool {
  return p.Nulls != nil
}

func (p *PrestoThriftDouble) IsSetDoubles() bool {
  return p.Doubles != nil
}

func (p *PrestoThriftDouble) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *PrestoThriftDouble)  ReadField1(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]bool, 0, size)
  p.Nulls =  tSlice
  for i := 0; i < size; i ++ {
var _elem5 bool
    if v, err := iprot.ReadBool(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem5 = v
}
    p.Nulls = append(p.Nulls, _elem5)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *PrestoThriftDouble)  ReadField2(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]float64, 0, size)
  p.Doubles =  tSlice
  for i := 0; i < size; i ++ {
var _elem6 float64
    if v, err := iprot.ReadDouble(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem6 = v
}
    p.Doubles = append(p.Doubles, _elem6)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *PrestoThriftDouble) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("PrestoThriftDouble"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *PrestoThriftDouble) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetNulls() {
    if err := oprot.WriteFieldBegin("nulls", thrift.LIST, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:nulls: ", p), err) }
    if err := oprot.WriteListBegin(thrift.BOOL, len(p.Nulls)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.Nulls {
      if err := oprot.WriteBool(bool(v)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:nulls: ", p), err) }
  }
  return err
}

func (p *PrestoThriftDouble) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetDoubles() {
    if err := oprot.WriteFieldBegin("doubles", thrift.LIST, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:doubles: ", p), err) }
    if err := oprot.WriteListBegin(thrift.DOUBLE, len(p.Doubles)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.Doubles {
      if err := oprot.WriteDouble(float64(v)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:doubles: ", p), err) }
  }
  return err
}

func (p *PrestoThriftDouble) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("PrestoThriftDouble(%+v)", *p)
}

// Elements of {@code nulls} array determine if a value for a corresponding row is null.
// Each elements of {@code sizes} array contains the length in bytes for the corresponding element.
// If row is null then the corresponding element in {@code sizes} is ignored.
// {@code bytes} array contains uft8 encoded byte values.
// Values for all rows are written to {@code bytes} array one after another.
// The total number of bytes must be equal to the sum of all sizes.
//
// Attributes:
//  - Nulls
//  - Sizes
//  - Bytes
type PrestoThriftVarchar struct {
  Nulls []bool `thrift:"nulls,1" db:"nulls" json:"nulls,omitempty"`
  Sizes []int32 `thrift:"sizes,2" db:"sizes" json:"sizes,omitempty"`
  Bytes []byte `thrift:"bytes,3" db:"bytes" json:"bytes,omitempty"`
}

func NewPrestoThriftVarchar() *PrestoThriftVarchar {
  return &PrestoThriftVarchar{}
}

var PrestoThriftVarchar_Nulls_DEFAULT []bool

func (p *PrestoThriftVarchar) GetNulls() []bool {
  return p.Nulls
}
var PrestoThriftVarchar_Sizes_DEFAULT []int32

func (p *PrestoThriftVarchar) GetSizes() []int32 {
  return p.Sizes
}
var PrestoThriftVarchar_Bytes_DEFAULT []byte

func (p *PrestoThriftVarchar) GetBytes() []byte {
  return p.Bytes
}
func (p *PrestoThriftVarchar) IsSetNulls() bool {
  return p.Nulls != nil
}

func (p *PrestoThriftVarchar) IsSetSizes() bool {
  return p.Sizes != nil
}

func (p *PrestoThriftVarchar) IsSetBytes() bool {
  return p.Bytes != nil
}

func (p *PrestoThriftVarchar) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *PrestoThriftVarchar)  ReadField1(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]bool, 0, size)
  p.Nulls =  tSlice
  for i := 0; i < size; i ++ {
var _elem7 bool
    if v, err := iprot.ReadBool(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem7 = v
}
    p.Nulls = append(p.Nulls, _elem7)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *PrestoThriftVarchar)  ReadField2(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]int32, 0, size)
  p.Sizes =  tSlice
  for i := 0; i < size; i ++ {
var _elem8 int32
    if v, err := iprot.ReadI32(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem8 = v
}
    p.Sizes = append(p.Sizes, _elem8)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *PrestoThriftVarchar)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Bytes = v
}
  return nil
}

func (p *PrestoThriftVarchar) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("PrestoThriftVarchar"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *PrestoThriftVarchar) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetNulls() {
    if err := oprot.WriteFieldBegin("nulls", thrift.LIST, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:nulls: ", p), err) }
    if err := oprot.WriteListBegin(thrift.BOOL, len(p.Nulls)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.Nulls {
      if err := oprot.WriteBool(bool(v)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:nulls: ", p), err) }
  }
  return err
}

func (p *PrestoThriftVarchar) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetSizes() {
    if err := oprot.WriteFieldBegin("sizes", thrift.LIST, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:sizes: ", p), err) }
    if err := oprot.WriteListBegin(thrift.I32, len(p.Sizes)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.Sizes {
      if err := oprot.WriteI32(int32(v)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:sizes: ", p), err) }
  }
  return err
}

func (p *PrestoThriftVarchar) writeField3(oprot thrift.TProtocol) (err error) {
  if p.IsSetBytes() {
    if err := oprot.WriteFieldBegin("bytes", thrift.STRING, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:bytes: ", p), err) }
    if err := oprot.WriteBinary(p.Bytes); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.bytes (3) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:bytes: ", p), err) }
  }
  return err
}

func (p *PrestoThriftVarchar) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("PrestoThriftVarchar(%+v)", *p)
}

// Elements of {@code nulls} array determine if a value for a corresponding row is null.
// Elements of {@code booleans} array are values for each row. If row is null then value is ignored.
//
// Attributes:
//  - Nulls
//  - Booleans
type PrestoThriftBoolean struct {
  Nulls []bool `thrift:"nulls,1" db:"nulls" json:"nulls,omitempty"`
  Booleans []bool `thrift:"booleans,2" db:"booleans" json:"booleans,omitempty"`
}

func NewPrestoThriftBoolean() *PrestoThriftBoolean {
  return &PrestoThriftBoolean{}
}

var PrestoThriftBoolean_Nulls_DEFAULT []bool

func (p *PrestoThriftBoolean) GetNulls() []bool {
  return p.Nulls
}
var PrestoThriftBoolean_Booleans_DEFAULT []bool

func (p *PrestoThriftBoolean) GetBooleans() []bool {
  return p.Booleans
}
func (p *PrestoThriftBoolean) IsSetNulls() bool {
  return p.Nulls != nil
}

func (p *PrestoThriftBoolean) IsSetBooleans() bool {
  return p.Booleans != nil
}

func (p *PrestoThriftBoolean) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *PrestoThriftBoolean)  ReadField1(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]bool, 0, size)
  p.Nulls =  tSlice
  for i := 0; i < size; i ++ {
var _elem9 bool
    if v, err := iprot.ReadBool(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem9 = v
}
    p.Nulls = append(p.Nulls, _elem9)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *PrestoThriftBoolean)  ReadField2(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]bool, 0, size)
  p.Booleans =  tSlice
  for i := 0; i < size; i ++ {
var _elem10 bool
    if v, err := iprot.ReadBool(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem10 = v
}
    p.Booleans = append(p.Booleans, _elem10)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *PrestoThriftBoolean) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("PrestoThriftBoolean"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *PrestoThriftBoolean) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetNulls() {
    if err := oprot.WriteFieldBegin("nulls", thrift.LIST, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:nulls: ", p), err) }
    if err := oprot.WriteListBegin(thrift.BOOL, len(p.Nulls)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.Nulls {
      if err := oprot.WriteBool(bool(v)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:nulls: ", p), err) }
  }
  return err
}

func (p *PrestoThriftBoolean) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetBooleans() {
    if err := oprot.WriteFieldBegin("booleans", thrift.LIST, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:booleans: ", p), err) }
    if err := oprot.WriteListBegin(thrift.BOOL, len(p.Booleans)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.Booleans {
      if err := oprot.WriteBool(bool(v)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:booleans: ", p), err) }
  }
  return err
}

func (p *PrestoThriftBoolean) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("PrestoThriftBoolean(%+v)", *p)
}

// Elements of {@code nulls} array determine if a value for a corresponding row is null.
// Elements of {@code dates} array are date values for each row represented as the number
// of days passed since 1970-01-01.
// If row is null then value is ignored.
//
// Attributes:
//  - Nulls
//  - Dates
type PrestoThriftDate struct {
  Nulls []bool `thrift:"nulls,1" db:"nulls" json:"nulls,omitempty"`
  Dates []int32 `thrift:"dates,2" db:"dates" json:"dates,omitempty"`
}

func NewPrestoThriftDate() *PrestoThriftDate {
  return &PrestoThriftDate{}
}

var PrestoThriftDate_Nulls_DEFAULT []bool

func (p *PrestoThriftDate) GetNulls() []bool {
  return p.Nulls
}
var PrestoThriftDate_Dates_DEFAULT []int32

func (p *PrestoThriftDate) GetDates() []int32 {
  return p.Dates
}
func (p *PrestoThriftDate) IsSetNulls() bool {
  return p.Nulls != nil
}

func (p *PrestoThriftDate) IsSetDates() bool {
  return p.Dates != nil
}

func (p *PrestoThriftDate) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *PrestoThriftDate)  ReadField1(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]bool, 0, size)
  p.Nulls =  tSlice
  for i := 0; i < size; i ++ {
var _elem11 bool
    if v, err := iprot.ReadBool(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem11 = v
}
    p.Nulls = append(p.Nulls, _elem11)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *PrestoThriftDate)  ReadField2(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]int32, 0, size)
  p.Dates =  tSlice
  for i := 0; i < size; i ++ {
var _elem12 int32
    if v, err := iprot.ReadI32(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem12 = v
}
    p.Dates = append(p.Dates, _elem12)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *PrestoThriftDate) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("PrestoThriftDate"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *PrestoThriftDate) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetNulls() {
    if err := oprot.WriteFieldBegin("nulls", thrift.LIST, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:nulls: ", p), err) }
    if err := oprot.WriteListBegin(thrift.BOOL, len(p.Nulls)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.Nulls {
      if err := oprot.WriteBool(bool(v)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:nulls: ", p), err) }
  }
  return err
}

func (p *PrestoThriftDate) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetDates() {
    if err := oprot.WriteFieldBegin("dates", thrift.LIST, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:dates: ", p), err) }
    if err := oprot.WriteListBegin(thrift.I32, len(p.Dates)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.Dates {
      if err := oprot.WriteI32(int32(v)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:dates: ", p), err) }
  }
  return err
}

func (p *PrestoThriftDate) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("PrestoThriftDate(%+v)", *p)
}

// Elements of {@code nulls} array determine if a value for a corresponding row is null.
// Elements of {@code timestamps} array are values for each row represented as the number
// of milliseconds passed since 1970-01-01T00:00:00 UTC.
// If row is null then value is ignored.
//
// Attributes:
//  - Nulls
//  - Timestamps
type PrestoThriftTimestamp struct {
  Nulls []bool `thrift:"nulls,1" db:"nulls" json:"nulls,omitempty"`
  Timestamps []int64 `thrift:"timestamps,2" db:"timestamps" json:"timestamps,omitempty"`
}

func NewPrestoThriftTimestamp() *PrestoThriftTimestamp {
  return &PrestoThriftTimestamp{}
}

var PrestoThriftTimestamp_Nulls_DEFAULT []bool

func (p *PrestoThriftTimestamp) GetNulls() []bool {
  return p.Nulls
}
var PrestoThriftTimestamp_Timestamps_DEFAULT []int64

func (p *PrestoThriftTimestamp) GetTimestamps() []int64 {
  return p.Timestamps
}
func (p *PrestoThriftTimestamp) IsSetNulls() bool {
  return p.Nulls != nil
}

func (p *PrestoThriftTimestamp) IsSetTimestamps() bool {
  return p.Timestamps != nil
}

func (p *PrestoThriftTimestamp) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *PrestoThriftTimestamp)  ReadField1(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]bool, 0, size)
  p.Nulls =  tSlice
  for i := 0; i < size; i ++ {
var _elem13 bool
    if v, err := iprot.ReadBool(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem13 = v
}
    p.Nulls = append(p.Nulls, _elem13)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *PrestoThriftTimestamp)  ReadField2(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]int64, 0, size)
  p.Timestamps =  tSlice
  for i := 0; i < size; i ++ {
var _elem14 int64
    if v, err := iprot.ReadI64(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem14 = v
}
    p.Timestamps = append(p.Timestamps, _elem14)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *PrestoThriftTimestamp) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("PrestoThriftTimestamp"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *PrestoThriftTimestamp) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetNulls() {
    if err := oprot.WriteFieldBegin("nulls", thrift.LIST, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:nulls: ", p), err) }
    if err := oprot.WriteListBegin(thrift.BOOL, len(p.Nulls)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.Nulls {
      if err := oprot.WriteBool(bool(v)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:nulls: ", p), err) }
  }
  return err
}

func (p *PrestoThriftTimestamp) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetTimestamps() {
    if err := oprot.WriteFieldBegin("timestamps", thrift.LIST, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:timestamps: ", p), err) }
    if err := oprot.WriteListBegin(thrift.I64, len(p.Timestamps)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.Timestamps {
      if err := oprot.WriteI64(int64(v)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:timestamps: ", p), err) }
  }
  return err
}

func (p *PrestoThriftTimestamp) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("PrestoThriftTimestamp(%+v)", *p)
}

// Elements of {@code nulls} array determine if a value for a corresponding row is null.
// Each elements of {@code sizes} array contains the length in bytes for the corresponding element.
// If row is null then the corresponding element in {@code sizes} is ignored.
// {@code bytes} array contains uft8 encoded byte values for string representation of json.
// Values for all rows are written to {@code bytes} array one after another.
// The total number of bytes must be equal to the sum of all sizes.
//
// Attributes:
//  - Nulls
//  - Sizes
//  - Bytes
type PrestoThriftJson struct {
  Nulls []bool `thrift:"nulls,1" db:"nulls" json:"nulls,omitempty"`
  Sizes []int32 `thrift:"sizes,2" db:"sizes" json:"sizes,omitempty"`
  Bytes []byte `thrift:"bytes,3" db:"bytes" json:"bytes,omitempty"`
}

func NewPrestoThriftJson() *PrestoThriftJson {
  return &PrestoThriftJson{}
}

var PrestoThriftJson_Nulls_DEFAULT []bool

func (p *PrestoThriftJson) GetNulls() []bool {
  return p.Nulls
}
var PrestoThriftJson_Sizes_DEFAULT []int32

func (p *PrestoThriftJson) GetSizes() []int32 {
  return p.Sizes
}
var PrestoThriftJson_Bytes_DEFAULT []byte

func (p *PrestoThriftJson) GetBytes() []byte {
  return p.Bytes
}
func (p *PrestoThriftJson) IsSetNulls() bool {
  return p.Nulls != nil
}

func (p *PrestoThriftJson) IsSetSizes() bool {
  return p.Sizes != nil
}

func (p *PrestoThriftJson) IsSetBytes() bool {
  return p.Bytes != nil
}

func (p *PrestoThriftJson) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *PrestoThriftJson)  ReadField1(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]bool, 0, size)
  p.Nulls =  tSlice
  for i := 0; i < size; i ++ {
var _elem15 bool
    if v, err := iprot.ReadBool(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem15 = v
}
    p.Nulls = append(p.Nulls, _elem15)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *PrestoThriftJson)  ReadField2(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]int32, 0, size)
  p.Sizes =  tSlice
  for i := 0; i < size; i ++ {
var _elem16 int32
    if v, err := iprot.ReadI32(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem16 = v
}
    p.Sizes = append(p.Sizes, _elem16)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *PrestoThriftJson)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Bytes = v
}
  return nil
}

func (p *PrestoThriftJson) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("PrestoThriftJson"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *PrestoThriftJson) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetNulls() {
    if err := oprot.WriteFieldBegin("nulls", thrift.LIST, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:nulls: ", p), err) }
    if err := oprot.WriteListBegin(thrift.BOOL, len(p.Nulls)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.Nulls {
      if err := oprot.WriteBool(bool(v)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:nulls: ", p), err) }
  }
  return err
}

func (p *PrestoThriftJson) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetSizes() {
    if err := oprot.WriteFieldBegin("sizes", thrift.LIST, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:sizes: ", p), err) }
    if err := oprot.WriteListBegin(thrift.I32, len(p.Sizes)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.Sizes {
      if err := oprot.WriteI32(int32(v)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:sizes: ", p), err) }
  }
  return err
}

func (p *PrestoThriftJson) writeField3(oprot thrift.TProtocol) (err error) {
  if p.IsSetBytes() {
    if err := oprot.WriteFieldBegin("bytes", thrift.STRING, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:bytes: ", p), err) }
    if err := oprot.WriteBinary(p.Bytes); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.bytes (3) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:bytes: ", p), err) }
  }
  return err
}

func (p *PrestoThriftJson) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("PrestoThriftJson(%+v)", *p)
}

// Elements of {@code nulls} array determine if a value for a corresponding row is null.
// Each elements of {@code sizes} array contains the length in bytes for the corresponding element.
// If row is null then the corresponding element in {@code sizes} is ignored.
// {@code bytes} array contains encoded byte values for HyperLogLog representation as defined in
// Airlift specification: href="https://github.com/airlift/airlift/blob/master/stats/docs/hll.md
// Values for all rows are written to {@code bytes} array one after another.
// The total number of bytes must be equal to the sum of all sizes.
//
// Attributes:
//  - Nulls
//  - Sizes
//  - Bytes
type PrestoThriftHyperLogLog struct {
  Nulls []bool `thrift:"nulls,1" db:"nulls" json:"nulls,omitempty"`
  Sizes []int32 `thrift:"sizes,2" db:"sizes" json:"sizes,omitempty"`
  Bytes []byte `thrift:"bytes,3" db:"bytes" json:"bytes,omitempty"`
}

func NewPrestoThriftHyperLogLog() *PrestoThriftHyperLogLog {
  return &PrestoThriftHyperLogLog{}
}

var PrestoThriftHyperLogLog_Nulls_DEFAULT []bool

func (p *PrestoThriftHyperLogLog) GetNulls() []bool {
  return p.Nulls
}
var PrestoThriftHyperLogLog_Sizes_DEFAULT []int32

func (p *PrestoThriftHyperLogLog) GetSizes() []int32 {
  return p.Sizes
}
var PrestoThriftHyperLogLog_Bytes_DEFAULT []byte

func (p *PrestoThriftHyperLogLog) GetBytes() []byte {
  return p.Bytes
}
func (p *PrestoThriftHyperLogLog) IsSetNulls() bool {
  return p.Nulls != nil
}

func (p *PrestoThriftHyperLogLog) IsSetSizes() bool {
  return p.Sizes != nil
}

func (p *PrestoThriftHyperLogLog) IsSetBytes() bool {
  return p.Bytes != nil
}

func (p *PrestoThriftHyperLogLog) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *PrestoThriftHyperLogLog)  ReadField1(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]bool, 0, size)
  p.Nulls =  tSlice
  for i := 0; i < size; i ++ {
var _elem17 bool
    if v, err := iprot.ReadBool(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem17 = v
}
    p.Nulls = append(p.Nulls, _elem17)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *PrestoThriftHyperLogLog)  ReadField2(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]int32, 0, size)
  p.Sizes =  tSlice
  for i := 0; i < size; i ++ {
var _elem18 int32
    if v, err := iprot.ReadI32(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem18 = v
}
    p.Sizes = append(p.Sizes, _elem18)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *PrestoThriftHyperLogLog)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Bytes = v
}
  return nil
}

func (p *PrestoThriftHyperLogLog) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("PrestoThriftHyperLogLog"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *PrestoThriftHyperLogLog) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetNulls() {
    if err := oprot.WriteFieldBegin("nulls", thrift.LIST, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:nulls: ", p), err) }
    if err := oprot.WriteListBegin(thrift.BOOL, len(p.Nulls)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.Nulls {
      if err := oprot.WriteBool(bool(v)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:nulls: ", p), err) }
  }
  return err
}

func (p *PrestoThriftHyperLogLog) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetSizes() {
    if err := oprot.WriteFieldBegin("sizes", thrift.LIST, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:sizes: ", p), err) }
    if err := oprot.WriteListBegin(thrift.I32, len(p.Sizes)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.Sizes {
      if err := oprot.WriteI32(int32(v)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:sizes: ", p), err) }
  }
  return err
}

func (p *PrestoThriftHyperLogLog) writeField3(oprot thrift.TProtocol) (err error) {
  if p.IsSetBytes() {
    if err := oprot.WriteFieldBegin("bytes", thrift.STRING, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:bytes: ", p), err) }
    if err := oprot.WriteBinary(p.Bytes); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.bytes (3) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:bytes: ", p), err) }
  }
  return err
}

func (p *PrestoThriftHyperLogLog) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("PrestoThriftHyperLogLog(%+v)", *p)
}

// Elements of {@code nulls} array determine if a value for a corresponding row is null.
// Each elements of {@code sizes} array contains the number of elements in the corresponding values array.
// If row is null then the corresponding element in {@code sizes} is ignored.
// {@code values} is a bigint block containing array elements one after another for all rows.
// The total number of elements in bigint block must be equal to the sum of all sizes.
//
// Attributes:
//  - Nulls
//  - Sizes
//  - Values
type PrestoThriftBigintArray struct {
  Nulls []bool `thrift:"nulls,1" db:"nulls" json:"nulls,omitempty"`
  Sizes []int32 `thrift:"sizes,2" db:"sizes" json:"sizes,omitempty"`
  Values *PrestoThriftBigint `thrift:"values,3" db:"values" json:"values,omitempty"`
}

func NewPrestoThriftBigintArray() *PrestoThriftBigintArray {
  return &PrestoThriftBigintArray{}
}

var PrestoThriftBigintArray_Nulls_DEFAULT []bool

func (p *PrestoThriftBigintArray) GetNulls() []bool {
  return p.Nulls
}
var PrestoThriftBigintArray_Sizes_DEFAULT []int32

func (p *PrestoThriftBigintArray) GetSizes() []int32 {
  return p.Sizes
}
var PrestoThriftBigintArray_Values_DEFAULT *PrestoThriftBigint
func (p *PrestoThriftBigintArray) GetValues() *PrestoThriftBigint {
  if !p.IsSetValues() {
    return PrestoThriftBigintArray_Values_DEFAULT
  }
return p.Values
}
func (p *PrestoThriftBigintArray) IsSetNulls() bool {
  return p.Nulls != nil
}

func (p *PrestoThriftBigintArray) IsSetSizes() bool {
  return p.Sizes != nil
}

func (p *PrestoThriftBigintArray) IsSetValues() bool {
  return p.Values != nil
}

func (p *PrestoThriftBigintArray) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *PrestoThriftBigintArray)  ReadField1(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]bool, 0, size)
  p.Nulls =  tSlice
  for i := 0; i < size; i ++ {
var _elem19 bool
    if v, err := iprot.ReadBool(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem19 = v
}
    p.Nulls = append(p.Nulls, _elem19)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *PrestoThriftBigintArray)  ReadField2(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]int32, 0, size)
  p.Sizes =  tSlice
  for i := 0; i < size; i ++ {
var _elem20 int32
    if v, err := iprot.ReadI32(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem20 = v
}
    p.Sizes = append(p.Sizes, _elem20)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *PrestoThriftBigintArray)  ReadField3(iprot thrift.TProtocol) error {
  p.Values = &PrestoThriftBigint{}
  if err := p.Values.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Values), err)
  }
  return nil
}

func (p *PrestoThriftBigintArray) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("PrestoThriftBigintArray"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *PrestoThriftBigintArray) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetNulls() {
    if err := oprot.WriteFieldBegin("nulls", thrift.LIST, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:nulls: ", p), err) }
    if err := oprot.WriteListBegin(thrift.BOOL, len(p.Nulls)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.Nulls {
      if err := oprot.WriteBool(bool(v)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:nulls: ", p), err) }
  }
  return err
}

func (p *PrestoThriftBigintArray) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetSizes() {
    if err := oprot.WriteFieldBegin("sizes", thrift.LIST, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:sizes: ", p), err) }
    if err := oprot.WriteListBegin(thrift.I32, len(p.Sizes)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.Sizes {
      if err := oprot.WriteI32(int32(v)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:sizes: ", p), err) }
  }
  return err
}

func (p *PrestoThriftBigintArray) writeField3(oprot thrift.TProtocol) (err error) {
  if p.IsSetValues() {
    if err := oprot.WriteFieldBegin("values", thrift.STRUCT, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:values: ", p), err) }
    if err := p.Values.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Values), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:values: ", p), err) }
  }
  return err
}

func (p *PrestoThriftBigintArray) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("PrestoThriftBigintArray(%+v)", *p)
}

// Attributes:
//  - ID
type PrestoThriftId struct {
  ID []byte `thrift:"id,1" db:"id" json:"id"`
}

func NewPrestoThriftId() *PrestoThriftId {
  return &PrestoThriftId{}
}


func (p *PrestoThriftId) GetID() []byte {
  return p.ID
}
func (p *PrestoThriftId) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *PrestoThriftId)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ID = v
}
  return nil
}

func (p *PrestoThriftId) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("PrestoThriftId"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *PrestoThriftId) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("id", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:id: ", p), err) }
  if err := oprot.WriteBinary(p.ID); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.id (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:id: ", p), err) }
  return err
}

func (p *PrestoThriftId) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("PrestoThriftId(%+v)", *p)
}

// Attributes:
//  - Host
//  - Port
type PrestoThriftHostAddress struct {
  Host string `thrift:"host,1" db:"host" json:"host"`
  Port int32 `thrift:"port,2" db:"port" json:"port"`
}

func NewPrestoThriftHostAddress() *PrestoThriftHostAddress {
  return &PrestoThriftHostAddress{}
}


func (p *PrestoThriftHostAddress) GetHost() string {
  return p.Host
}

func (p *PrestoThriftHostAddress) GetPort() int32 {
  return p.Port
}
func (p *PrestoThriftHostAddress) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *PrestoThriftHostAddress)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Host = v
}
  return nil
}

func (p *PrestoThriftHostAddress)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Port = v
}
  return nil
}

func (p *PrestoThriftHostAddress) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("PrestoThriftHostAddress"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *PrestoThriftHostAddress) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("host", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:host: ", p), err) }
  if err := oprot.WriteString(string(p.Host)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.host (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:host: ", p), err) }
  return err
}

func (p *PrestoThriftHostAddress) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("port", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:port: ", p), err) }
  if err := oprot.WriteI32(int32(p.Port)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.port (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:port: ", p), err) }
  return err
}

func (p *PrestoThriftHostAddress) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("PrestoThriftHostAddress(%+v)", *p)
}

// Attributes:
//  - SchemaTableName
//  - Columns
//  - Comment
type PrestoThriftTableMetadata struct {
  SchemaTableName *PrestoThriftSchemaTableName `thrift:"schemaTableName,1" db:"schemaTableName" json:"schemaTableName"`
  Columns []*PrestoThriftColumnMetadata `thrift:"columns,2" db:"columns" json:"columns"`
  Comment *string `thrift:"comment,3" db:"comment" json:"comment,omitempty"`
}

func NewPrestoThriftTableMetadata() *PrestoThriftTableMetadata {
  return &PrestoThriftTableMetadata{}
}

var PrestoThriftTableMetadata_SchemaTableName_DEFAULT *PrestoThriftSchemaTableName
func (p *PrestoThriftTableMetadata) GetSchemaTableName() *PrestoThriftSchemaTableName {
  if !p.IsSetSchemaTableName() {
    return PrestoThriftTableMetadata_SchemaTableName_DEFAULT
  }
return p.SchemaTableName
}

func (p *PrestoThriftTableMetadata) GetColumns() []*PrestoThriftColumnMetadata {
  return p.Columns
}
var PrestoThriftTableMetadata_Comment_DEFAULT string
func (p *PrestoThriftTableMetadata) GetComment() string {
  if !p.IsSetComment() {
    return PrestoThriftTableMetadata_Comment_DEFAULT
  }
return *p.Comment
}
func (p *PrestoThriftTableMetadata) IsSetSchemaTableName() bool {
  return p.SchemaTableName != nil
}

func (p *PrestoThriftTableMetadata) IsSetComment() bool {
  return p.Comment != nil
}

func (p *PrestoThriftTableMetadata) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *PrestoThriftTableMetadata)  ReadField1(iprot thrift.TProtocol) error {
  p.SchemaTableName = &PrestoThriftSchemaTableName{}
  if err := p.SchemaTableName.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.SchemaTableName), err)
  }
  return nil
}

func (p *PrestoThriftTableMetadata)  ReadField2(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*PrestoThriftColumnMetadata, 0, size)
  p.Columns =  tSlice
  for i := 0; i < size; i ++ {
    _elem21 := &PrestoThriftColumnMetadata{}
    if err := _elem21.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem21), err)
    }
    p.Columns = append(p.Columns, _elem21)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *PrestoThriftTableMetadata)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Comment = &v
}
  return nil
}

func (p *PrestoThriftTableMetadata) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("PrestoThriftTableMetadata"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *PrestoThriftTableMetadata) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("schemaTableName", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:schemaTableName: ", p), err) }
  if err := p.SchemaTableName.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.SchemaTableName), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:schemaTableName: ", p), err) }
  return err
}

func (p *PrestoThriftTableMetadata) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("columns", thrift.LIST, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:columns: ", p), err) }
  if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Columns)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Columns {
    if err := v.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:columns: ", p), err) }
  return err
}

func (p *PrestoThriftTableMetadata) writeField3(oprot thrift.TProtocol) (err error) {
  if p.IsSetComment() {
    if err := oprot.WriteFieldBegin("comment", thrift.STRING, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:comment: ", p), err) }
    if err := oprot.WriteString(string(*p.Comment)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.comment (3) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:comment: ", p), err) }
  }
  return err
}

func (p *PrestoThriftTableMetadata) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("PrestoThriftTableMetadata(%+v)", *p)
}

// Attributes:
//  - IntegerData
//  - BigintData
//  - DoubleData
//  - VarcharData
//  - BooleanData
//  - DateData
//  - TimestampData
//  - JsonData
//  - HyperLogLogData
//  - BigintArrayData
type PrestoThriftBlock struct {
  IntegerData *PrestoThriftInteger `thrift:"integerData,1" db:"integerData" json:"integerData,omitempty"`
  BigintData *PrestoThriftBigint `thrift:"bigintData,2" db:"bigintData" json:"bigintData,omitempty"`
  DoubleData *PrestoThriftDouble `thrift:"doubleData,3" db:"doubleData" json:"doubleData,omitempty"`
  VarcharData *PrestoThriftVarchar `thrift:"varcharData,4" db:"varcharData" json:"varcharData,omitempty"`
  BooleanData *PrestoThriftBoolean `thrift:"booleanData,5" db:"booleanData" json:"booleanData,omitempty"`
  DateData *PrestoThriftDate `thrift:"dateData,6" db:"dateData" json:"dateData,omitempty"`
  TimestampData *PrestoThriftTimestamp `thrift:"timestampData,7" db:"timestampData" json:"timestampData,omitempty"`
  JsonData *PrestoThriftJson `thrift:"jsonData,8" db:"jsonData" json:"jsonData,omitempty"`
  HyperLogLogData *PrestoThriftHyperLogLog `thrift:"hyperLogLogData,9" db:"hyperLogLogData" json:"hyperLogLogData,omitempty"`
  BigintArrayData *PrestoThriftBigintArray `thrift:"bigintArrayData,10" db:"bigintArrayData" json:"bigintArrayData,omitempty"`
}

func NewPrestoThriftBlock() *PrestoThriftBlock {
  return &PrestoThriftBlock{}
}

var PrestoThriftBlock_IntegerData_DEFAULT *PrestoThriftInteger
func (p *PrestoThriftBlock) GetIntegerData() *PrestoThriftInteger {
  if !p.IsSetIntegerData() {
    return PrestoThriftBlock_IntegerData_DEFAULT
  }
return p.IntegerData
}
var PrestoThriftBlock_BigintData_DEFAULT *PrestoThriftBigint
func (p *PrestoThriftBlock) GetBigintData() *PrestoThriftBigint {
  if !p.IsSetBigintData() {
    return PrestoThriftBlock_BigintData_DEFAULT
  }
return p.BigintData
}
var PrestoThriftBlock_DoubleData_DEFAULT *PrestoThriftDouble
func (p *PrestoThriftBlock) GetDoubleData() *PrestoThriftDouble {
  if !p.IsSetDoubleData() {
    return PrestoThriftBlock_DoubleData_DEFAULT
  }
return p.DoubleData
}
var PrestoThriftBlock_VarcharData_DEFAULT *PrestoThriftVarchar
func (p *PrestoThriftBlock) GetVarcharData() *PrestoThriftVarchar {
  if !p.IsSetVarcharData() {
    return PrestoThriftBlock_VarcharData_DEFAULT
  }
return p.VarcharData
}
var PrestoThriftBlock_BooleanData_DEFAULT *PrestoThriftBoolean
func (p *PrestoThriftBlock) GetBooleanData() *PrestoThriftBoolean {
  if !p.IsSetBooleanData() {
    return PrestoThriftBlock_BooleanData_DEFAULT
  }
return p.BooleanData
}
var PrestoThriftBlock_DateData_DEFAULT *PrestoThriftDate
func (p *PrestoThriftBlock) GetDateData() *PrestoThriftDate {
  if !p.IsSetDateData() {
    return PrestoThriftBlock_DateData_DEFAULT
  }
return p.DateData
}
var PrestoThriftBlock_TimestampData_DEFAULT *PrestoThriftTimestamp
func (p *PrestoThriftBlock) GetTimestampData() *PrestoThriftTimestamp {
  if !p.IsSetTimestampData() {
    return PrestoThriftBlock_TimestampData_DEFAULT
  }
return p.TimestampData
}
var PrestoThriftBlock_JsonData_DEFAULT *PrestoThriftJson
func (p *PrestoThriftBlock) GetJsonData() *PrestoThriftJson {
  if !p.IsSetJsonData() {
    return PrestoThriftBlock_JsonData_DEFAULT
  }
return p.JsonData
}
var PrestoThriftBlock_HyperLogLogData_DEFAULT *PrestoThriftHyperLogLog
func (p *PrestoThriftBlock) GetHyperLogLogData() *PrestoThriftHyperLogLog {
  if !p.IsSetHyperLogLogData() {
    return PrestoThriftBlock_HyperLogLogData_DEFAULT
  }
return p.HyperLogLogData
}
var PrestoThriftBlock_BigintArrayData_DEFAULT *PrestoThriftBigintArray
func (p *PrestoThriftBlock) GetBigintArrayData() *PrestoThriftBigintArray {
  if !p.IsSetBigintArrayData() {
    return PrestoThriftBlock_BigintArrayData_DEFAULT
  }
return p.BigintArrayData
}
func (p *PrestoThriftBlock) IsSetIntegerData() bool {
  return p.IntegerData != nil
}

func (p *PrestoThriftBlock) IsSetBigintData() bool {
  return p.BigintData != nil
}

func (p *PrestoThriftBlock) IsSetDoubleData() bool {
  return p.DoubleData != nil
}

func (p *PrestoThriftBlock) IsSetVarcharData() bool {
  return p.VarcharData != nil
}

func (p *PrestoThriftBlock) IsSetBooleanData() bool {
  return p.BooleanData != nil
}

func (p *PrestoThriftBlock) IsSetDateData() bool {
  return p.DateData != nil
}

func (p *PrestoThriftBlock) IsSetTimestampData() bool {
  return p.TimestampData != nil
}

func (p *PrestoThriftBlock) IsSetJsonData() bool {
  return p.JsonData != nil
}

func (p *PrestoThriftBlock) IsSetHyperLogLogData() bool {
  return p.HyperLogLogData != nil
}

func (p *PrestoThriftBlock) IsSetBigintArrayData() bool {
  return p.BigintArrayData != nil
}

func (p *PrestoThriftBlock) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField5(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField6(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 7:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField7(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 8:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField8(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 9:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField9(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 10:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField10(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *PrestoThriftBlock)  ReadField1(iprot thrift.TProtocol) error {
  p.IntegerData = &PrestoThriftInteger{}
  if err := p.IntegerData.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.IntegerData), err)
  }
  return nil
}

func (p *PrestoThriftBlock)  ReadField2(iprot thrift.TProtocol) error {
  p.BigintData = &PrestoThriftBigint{}
  if err := p.BigintData.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.BigintData), err)
  }
  return nil
}

func (p *PrestoThriftBlock)  ReadField3(iprot thrift.TProtocol) error {
  p.DoubleData = &PrestoThriftDouble{}
  if err := p.DoubleData.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.DoubleData), err)
  }
  return nil
}

func (p *PrestoThriftBlock)  ReadField4(iprot thrift.TProtocol) error {
  p.VarcharData = &PrestoThriftVarchar{}
  if err := p.VarcharData.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.VarcharData), err)
  }
  return nil
}

func (p *PrestoThriftBlock)  ReadField5(iprot thrift.TProtocol) error {
  p.BooleanData = &PrestoThriftBoolean{}
  if err := p.BooleanData.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.BooleanData), err)
  }
  return nil
}

func (p *PrestoThriftBlock)  ReadField6(iprot thrift.TProtocol) error {
  p.DateData = &PrestoThriftDate{}
  if err := p.DateData.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.DateData), err)
  }
  return nil
}

func (p *PrestoThriftBlock)  ReadField7(iprot thrift.TProtocol) error {
  p.TimestampData = &PrestoThriftTimestamp{}
  if err := p.TimestampData.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.TimestampData), err)
  }
  return nil
}

func (p *PrestoThriftBlock)  ReadField8(iprot thrift.TProtocol) error {
  p.JsonData = &PrestoThriftJson{}
  if err := p.JsonData.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.JsonData), err)
  }
  return nil
}

func (p *PrestoThriftBlock)  ReadField9(iprot thrift.TProtocol) error {
  p.HyperLogLogData = &PrestoThriftHyperLogLog{}
  if err := p.HyperLogLogData.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.HyperLogLogData), err)
  }
  return nil
}

func (p *PrestoThriftBlock)  ReadField10(iprot thrift.TProtocol) error {
  p.BigintArrayData = &PrestoThriftBigintArray{}
  if err := p.BigintArrayData.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.BigintArrayData), err)
  }
  return nil
}

func (p *PrestoThriftBlock) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("PrestoThriftBlock"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
    if err := p.writeField6(oprot); err != nil { return err }
    if err := p.writeField7(oprot); err != nil { return err }
    if err := p.writeField8(oprot); err != nil { return err }
    if err := p.writeField9(oprot); err != nil { return err }
    if err := p.writeField10(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *PrestoThriftBlock) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetIntegerData() {
    if err := oprot.WriteFieldBegin("integerData", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:integerData: ", p), err) }
    if err := p.IntegerData.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.IntegerData), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:integerData: ", p), err) }
  }
  return err
}

func (p *PrestoThriftBlock) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetBigintData() {
    if err := oprot.WriteFieldBegin("bigintData", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:bigintData: ", p), err) }
    if err := p.BigintData.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.BigintData), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:bigintData: ", p), err) }
  }
  return err
}

func (p *PrestoThriftBlock) writeField3(oprot thrift.TProtocol) (err error) {
  if p.IsSetDoubleData() {
    if err := oprot.WriteFieldBegin("doubleData", thrift.STRUCT, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:doubleData: ", p), err) }
    if err := p.DoubleData.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.DoubleData), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:doubleData: ", p), err) }
  }
  return err
}

func (p *PrestoThriftBlock) writeField4(oprot thrift.TProtocol) (err error) {
  if p.IsSetVarcharData() {
    if err := oprot.WriteFieldBegin("varcharData", thrift.STRUCT, 4); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:varcharData: ", p), err) }
    if err := p.VarcharData.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.VarcharData), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 4:varcharData: ", p), err) }
  }
  return err
}

func (p *PrestoThriftBlock) writeField5(oprot thrift.TProtocol) (err error) {
  if p.IsSetBooleanData() {
    if err := oprot.WriteFieldBegin("booleanData", thrift.STRUCT, 5); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:booleanData: ", p), err) }
    if err := p.BooleanData.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.BooleanData), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 5:booleanData: ", p), err) }
  }
  return err
}

func (p *PrestoThriftBlock) writeField6(oprot thrift.TProtocol) (err error) {
  if p.IsSetDateData() {
    if err := oprot.WriteFieldBegin("dateData", thrift.STRUCT, 6); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:dateData: ", p), err) }
    if err := p.DateData.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.DateData), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 6:dateData: ", p), err) }
  }
  return err
}

func (p *PrestoThriftBlock) writeField7(oprot thrift.TProtocol) (err error) {
  if p.IsSetTimestampData() {
    if err := oprot.WriteFieldBegin("timestampData", thrift.STRUCT, 7); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:timestampData: ", p), err) }
    if err := p.TimestampData.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.TimestampData), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 7:timestampData: ", p), err) }
  }
  return err
}

func (p *PrestoThriftBlock) writeField8(oprot thrift.TProtocol) (err error) {
  if p.IsSetJsonData() {
    if err := oprot.WriteFieldBegin("jsonData", thrift.STRUCT, 8); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:jsonData: ", p), err) }
    if err := p.JsonData.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.JsonData), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 8:jsonData: ", p), err) }
  }
  return err
}

func (p *PrestoThriftBlock) writeField9(oprot thrift.TProtocol) (err error) {
  if p.IsSetHyperLogLogData() {
    if err := oprot.WriteFieldBegin("hyperLogLogData", thrift.STRUCT, 9); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 9:hyperLogLogData: ", p), err) }
    if err := p.HyperLogLogData.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.HyperLogLogData), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 9:hyperLogLogData: ", p), err) }
  }
  return err
}

func (p *PrestoThriftBlock) writeField10(oprot thrift.TProtocol) (err error) {
  if p.IsSetBigintArrayData() {
    if err := oprot.WriteFieldBegin("bigintArrayData", thrift.STRUCT, 10); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:bigintArrayData: ", p), err) }
    if err := p.BigintArrayData.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.BigintArrayData), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 10:bigintArrayData: ", p), err) }
  }
  return err
}

func (p *PrestoThriftBlock) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("PrestoThriftBlock(%+v)", *p)
}

// LOWER UNBOUNDED is specified with an empty value and an ABOVE bound
// UPPER UNBOUNDED is specified with an empty value and a BELOW bound
//
// Attributes:
//  - Value
//  - Bound
type PrestoThriftMarker struct {
  Value *PrestoThriftBlock `thrift:"value,1" db:"value" json:"value,omitempty"`
  Bound PrestoThriftBound `thrift:"bound,2" db:"bound" json:"bound"`
}

func NewPrestoThriftMarker() *PrestoThriftMarker {
  return &PrestoThriftMarker{}
}

var PrestoThriftMarker_Value_DEFAULT *PrestoThriftBlock
func (p *PrestoThriftMarker) GetValue() *PrestoThriftBlock {
  if !p.IsSetValue() {
    return PrestoThriftMarker_Value_DEFAULT
  }
return p.Value
}

func (p *PrestoThriftMarker) GetBound() PrestoThriftBound {
  return p.Bound
}
func (p *PrestoThriftMarker) IsSetValue() bool {
  return p.Value != nil
}

func (p *PrestoThriftMarker) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *PrestoThriftMarker)  ReadField1(iprot thrift.TProtocol) error {
  p.Value = &PrestoThriftBlock{}
  if err := p.Value.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Value), err)
  }
  return nil
}

func (p *PrestoThriftMarker)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  temp := PrestoThriftBound(v)
  p.Bound = temp
}
  return nil
}

func (p *PrestoThriftMarker) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("PrestoThriftMarker"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *PrestoThriftMarker) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetValue() {
    if err := oprot.WriteFieldBegin("value", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:value: ", p), err) }
    if err := p.Value.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Value), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:value: ", p), err) }
  }
  return err
}

func (p *PrestoThriftMarker) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("bound", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:bound: ", p), err) }
  if err := oprot.WriteI32(int32(p.Bound)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.bound (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:bound: ", p), err) }
  return err
}

func (p *PrestoThriftMarker) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("PrestoThriftMarker(%+v)", *p)
}

// Attributes:
//  - Token
type PrestoThriftNullableToken struct {
  Token *PrestoThriftId `thrift:"token,1" db:"token" json:"token,omitempty"`
}

func NewPrestoThriftNullableToken() *PrestoThriftNullableToken {
  return &PrestoThriftNullableToken{}
}

var PrestoThriftNullableToken_Token_DEFAULT *PrestoThriftId
func (p *PrestoThriftNullableToken) GetToken() *PrestoThriftId {
  if !p.IsSetToken() {
    return PrestoThriftNullableToken_Token_DEFAULT
  }
return p.Token
}
func (p *PrestoThriftNullableToken) IsSetToken() bool {
  return p.Token != nil
}

func (p *PrestoThriftNullableToken) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *PrestoThriftNullableToken)  ReadField1(iprot thrift.TProtocol) error {
  p.Token = &PrestoThriftId{}
  if err := p.Token.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Token), err)
  }
  return nil
}

func (p *PrestoThriftNullableToken) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("PrestoThriftNullableToken"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *PrestoThriftNullableToken) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetToken() {
    if err := oprot.WriteFieldBegin("token", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:token: ", p), err) }
    if err := p.Token.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Token), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:token: ", p), err) }
  }
  return err
}

func (p *PrestoThriftNullableToken) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("PrestoThriftNullableToken(%+v)", *p)
}

// Attributes:
//  - SplitId
//  - Hosts
type PrestoThriftSplit struct {
  SplitId *PrestoThriftId `thrift:"splitId,1" db:"splitId" json:"splitId"`
  Hosts []*PrestoThriftHostAddress `thrift:"hosts,2" db:"hosts" json:"hosts"`
}

func NewPrestoThriftSplit() *PrestoThriftSplit {
  return &PrestoThriftSplit{}
}

var PrestoThriftSplit_SplitId_DEFAULT *PrestoThriftId
func (p *PrestoThriftSplit) GetSplitId() *PrestoThriftId {
  if !p.IsSetSplitId() {
    return PrestoThriftSplit_SplitId_DEFAULT
  }
return p.SplitId
}

func (p *PrestoThriftSplit) GetHosts() []*PrestoThriftHostAddress {
  return p.Hosts
}
func (p *PrestoThriftSplit) IsSetSplitId() bool {
  return p.SplitId != nil
}

func (p *PrestoThriftSplit) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *PrestoThriftSplit)  ReadField1(iprot thrift.TProtocol) error {
  p.SplitId = &PrestoThriftId{}
  if err := p.SplitId.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.SplitId), err)
  }
  return nil
}

func (p *PrestoThriftSplit)  ReadField2(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*PrestoThriftHostAddress, 0, size)
  p.Hosts =  tSlice
  for i := 0; i < size; i ++ {
    _elem22 := &PrestoThriftHostAddress{}
    if err := _elem22.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem22), err)
    }
    p.Hosts = append(p.Hosts, _elem22)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *PrestoThriftSplit) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("PrestoThriftSplit"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *PrestoThriftSplit) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("splitId", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:splitId: ", p), err) }
  if err := p.SplitId.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.SplitId), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:splitId: ", p), err) }
  return err
}

func (p *PrestoThriftSplit) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("hosts", thrift.LIST, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:hosts: ", p), err) }
  if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Hosts)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Hosts {
    if err := v.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:hosts: ", p), err) }
  return err
}

func (p *PrestoThriftSplit) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("PrestoThriftSplit(%+v)", *p)
}

// Attributes:
//  - ColumnBlocks: Returns data in a columnar format.
// Columns in this list must be in the order they were requested by the engine.
//  - RowCount
//  - NextToken
type PrestoThriftPageResult_ struct {
  ColumnBlocks []*PrestoThriftBlock `thrift:"columnBlocks,1" db:"columnBlocks" json:"columnBlocks"`
  RowCount int32 `thrift:"rowCount,2" db:"rowCount" json:"rowCount"`
  NextToken *PrestoThriftId `thrift:"nextToken,3" db:"nextToken" json:"nextToken,omitempty"`
}

func NewPrestoThriftPageResult_() *PrestoThriftPageResult_ {
  return &PrestoThriftPageResult_{}
}


func (p *PrestoThriftPageResult_) GetColumnBlocks() []*PrestoThriftBlock {
  return p.ColumnBlocks
}

func (p *PrestoThriftPageResult_) GetRowCount() int32 {
  return p.RowCount
}
var PrestoThriftPageResult__NextToken_DEFAULT *PrestoThriftId
func (p *PrestoThriftPageResult_) GetNextToken() *PrestoThriftId {
  if !p.IsSetNextToken() {
    return PrestoThriftPageResult__NextToken_DEFAULT
  }
return p.NextToken
}
func (p *PrestoThriftPageResult_) IsSetNextToken() bool {
  return p.NextToken != nil
}

func (p *PrestoThriftPageResult_) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *PrestoThriftPageResult_)  ReadField1(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*PrestoThriftBlock, 0, size)
  p.ColumnBlocks =  tSlice
  for i := 0; i < size; i ++ {
    _elem23 := &PrestoThriftBlock{}
    if err := _elem23.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem23), err)
    }
    p.ColumnBlocks = append(p.ColumnBlocks, _elem23)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *PrestoThriftPageResult_)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.RowCount = v
}
  return nil
}

func (p *PrestoThriftPageResult_)  ReadField3(iprot thrift.TProtocol) error {
  p.NextToken = &PrestoThriftId{}
  if err := p.NextToken.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.NextToken), err)
  }
  return nil
}

func (p *PrestoThriftPageResult_) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("PrestoThriftPageResult"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *PrestoThriftPageResult_) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("columnBlocks", thrift.LIST, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:columnBlocks: ", p), err) }
  if err := oprot.WriteListBegin(thrift.STRUCT, len(p.ColumnBlocks)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.ColumnBlocks {
    if err := v.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:columnBlocks: ", p), err) }
  return err
}

func (p *PrestoThriftPageResult_) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("rowCount", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:rowCount: ", p), err) }
  if err := oprot.WriteI32(int32(p.RowCount)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.rowCount (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:rowCount: ", p), err) }
  return err
}

func (p *PrestoThriftPageResult_) writeField3(oprot thrift.TProtocol) (err error) {
  if p.IsSetNextToken() {
    if err := oprot.WriteFieldBegin("nextToken", thrift.STRUCT, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:nextToken: ", p), err) }
    if err := p.NextToken.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.NextToken), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:nextToken: ", p), err) }
  }
  return err
}

func (p *PrestoThriftPageResult_) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("PrestoThriftPageResult_(%+v)", *p)
}

// Attributes:
//  - TableMetadata
type PrestoThriftNullableTableMetadata struct {
  TableMetadata *PrestoThriftTableMetadata `thrift:"tableMetadata,1" db:"tableMetadata" json:"tableMetadata,omitempty"`
}

func NewPrestoThriftNullableTableMetadata() *PrestoThriftNullableTableMetadata {
  return &PrestoThriftNullableTableMetadata{}
}

var PrestoThriftNullableTableMetadata_TableMetadata_DEFAULT *PrestoThriftTableMetadata
func (p *PrestoThriftNullableTableMetadata) GetTableMetadata() *PrestoThriftTableMetadata {
  if !p.IsSetTableMetadata() {
    return PrestoThriftNullableTableMetadata_TableMetadata_DEFAULT
  }
return p.TableMetadata
}
func (p *PrestoThriftNullableTableMetadata) IsSetTableMetadata() bool {
  return p.TableMetadata != nil
}

func (p *PrestoThriftNullableTableMetadata) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *PrestoThriftNullableTableMetadata)  ReadField1(iprot thrift.TProtocol) error {
  p.TableMetadata = &PrestoThriftTableMetadata{}
  if err := p.TableMetadata.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.TableMetadata), err)
  }
  return nil
}

func (p *PrestoThriftNullableTableMetadata) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("PrestoThriftNullableTableMetadata"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *PrestoThriftNullableTableMetadata) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetTableMetadata() {
    if err := oprot.WriteFieldBegin("tableMetadata", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:tableMetadata: ", p), err) }
    if err := p.TableMetadata.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.TableMetadata), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:tableMetadata: ", p), err) }
  }
  return err
}

func (p *PrestoThriftNullableTableMetadata) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("PrestoThriftNullableTableMetadata(%+v)", *p)
}

// A set containing values that are uniquely identifiable.
// Assumes an infinite number of possible values. The values may be collectively included (aka whitelist)
// or collectively excluded (aka !whitelist).
// This structure is used with comparable, but not orderable types like "json", "map".
//
// Attributes:
//  - WhiteList
//  - Values
type PrestoThriftEquatableValueSet struct {
  WhiteList bool `thrift:"whiteList,1" db:"whiteList" json:"whiteList"`
  Values []*PrestoThriftBlock `thrift:"values,2" db:"values" json:"values"`
}

func NewPrestoThriftEquatableValueSet() *PrestoThriftEquatableValueSet {
  return &PrestoThriftEquatableValueSet{}
}


func (p *PrestoThriftEquatableValueSet) GetWhiteList() bool {
  return p.WhiteList
}

func (p *PrestoThriftEquatableValueSet) GetValues() []*PrestoThriftBlock {
  return p.Values
}
func (p *PrestoThriftEquatableValueSet) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *PrestoThriftEquatableValueSet)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.WhiteList = v
}
  return nil
}

func (p *PrestoThriftEquatableValueSet)  ReadField2(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*PrestoThriftBlock, 0, size)
  p.Values =  tSlice
  for i := 0; i < size; i ++ {
    _elem24 := &PrestoThriftBlock{}
    if err := _elem24.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem24), err)
    }
    p.Values = append(p.Values, _elem24)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *PrestoThriftEquatableValueSet) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("PrestoThriftEquatableValueSet"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *PrestoThriftEquatableValueSet) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("whiteList", thrift.BOOL, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:whiteList: ", p), err) }
  if err := oprot.WriteBool(bool(p.WhiteList)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.whiteList (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:whiteList: ", p), err) }
  return err
}

func (p *PrestoThriftEquatableValueSet) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("values", thrift.LIST, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:values: ", p), err) }
  if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Values)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Values {
    if err := v.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:values: ", p), err) }
  return err
}

func (p *PrestoThriftEquatableValueSet) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("PrestoThriftEquatableValueSet(%+v)", *p)
}

// Attributes:
//  - Low
//  - High
type PrestoThriftRange struct {
  Low *PrestoThriftMarker `thrift:"low,1" db:"low" json:"low"`
  High *PrestoThriftMarker `thrift:"high,2" db:"high" json:"high"`
}

func NewPrestoThriftRange() *PrestoThriftRange {
  return &PrestoThriftRange{}
}

var PrestoThriftRange_Low_DEFAULT *PrestoThriftMarker
func (p *PrestoThriftRange) GetLow() *PrestoThriftMarker {
  if !p.IsSetLow() {
    return PrestoThriftRange_Low_DEFAULT
  }
return p.Low
}
var PrestoThriftRange_High_DEFAULT *PrestoThriftMarker
func (p *PrestoThriftRange) GetHigh() *PrestoThriftMarker {
  if !p.IsSetHigh() {
    return PrestoThriftRange_High_DEFAULT
  }
return p.High
}
func (p *PrestoThriftRange) IsSetLow() bool {
  return p.Low != nil
}

func (p *PrestoThriftRange) IsSetHigh() bool {
  return p.High != nil
}

func (p *PrestoThriftRange) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *PrestoThriftRange)  ReadField1(iprot thrift.TProtocol) error {
  p.Low = &PrestoThriftMarker{}
  if err := p.Low.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Low), err)
  }
  return nil
}

func (p *PrestoThriftRange)  ReadField2(iprot thrift.TProtocol) error {
  p.High = &PrestoThriftMarker{}
  if err := p.High.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.High), err)
  }
  return nil
}

func (p *PrestoThriftRange) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("PrestoThriftRange"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *PrestoThriftRange) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("low", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:low: ", p), err) }
  if err := p.Low.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Low), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:low: ", p), err) }
  return err
}

func (p *PrestoThriftRange) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("high", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:high: ", p), err) }
  if err := p.High.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.High), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:high: ", p), err) }
  return err
}

func (p *PrestoThriftRange) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("PrestoThriftRange(%+v)", *p)
}

// Attributes:
//  - Splits
//  - NextToken
type PrestoThriftSplitBatch struct {
  Splits []*PrestoThriftSplit `thrift:"splits,1" db:"splits" json:"splits"`
  NextToken *PrestoThriftId `thrift:"nextToken,2" db:"nextToken" json:"nextToken,omitempty"`
}

func NewPrestoThriftSplitBatch() *PrestoThriftSplitBatch {
  return &PrestoThriftSplitBatch{}
}


func (p *PrestoThriftSplitBatch) GetSplits() []*PrestoThriftSplit {
  return p.Splits
}
var PrestoThriftSplitBatch_NextToken_DEFAULT *PrestoThriftId
func (p *PrestoThriftSplitBatch) GetNextToken() *PrestoThriftId {
  if !p.IsSetNextToken() {
    return PrestoThriftSplitBatch_NextToken_DEFAULT
  }
return p.NextToken
}
func (p *PrestoThriftSplitBatch) IsSetNextToken() bool {
  return p.NextToken != nil
}

func (p *PrestoThriftSplitBatch) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *PrestoThriftSplitBatch)  ReadField1(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*PrestoThriftSplit, 0, size)
  p.Splits =  tSlice
  for i := 0; i < size; i ++ {
    _elem25 := &PrestoThriftSplit{}
    if err := _elem25.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem25), err)
    }
    p.Splits = append(p.Splits, _elem25)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *PrestoThriftSplitBatch)  ReadField2(iprot thrift.TProtocol) error {
  p.NextToken = &PrestoThriftId{}
  if err := p.NextToken.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.NextToken), err)
  }
  return nil
}

func (p *PrestoThriftSplitBatch) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("PrestoThriftSplitBatch"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *PrestoThriftSplitBatch) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("splits", thrift.LIST, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:splits: ", p), err) }
  if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Splits)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Splits {
    if err := v.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:splits: ", p), err) }
  return err
}

func (p *PrestoThriftSplitBatch) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetNextToken() {
    if err := oprot.WriteFieldBegin("nextToken", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:nextToken: ", p), err) }
    if err := p.NextToken.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.NextToken), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:nextToken: ", p), err) }
  }
  return err
}

func (p *PrestoThriftSplitBatch) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("PrestoThriftSplitBatch(%+v)", *p)
}

// A set containing zero or more Ranges of the same type over a continuous space of possible values.
// Ranges are coalesced into the most compact representation of non-overlapping Ranges.
// This structure is used with comparable and orderable types like bigint, integer, double, varchar, etc.
//
// Attributes:
//  - Ranges
type PrestoThriftRangeValueSet struct {
  Ranges []*PrestoThriftRange `thrift:"ranges,1" db:"ranges" json:"ranges"`
}

func NewPrestoThriftRangeValueSet() *PrestoThriftRangeValueSet {
  return &PrestoThriftRangeValueSet{}
}


func (p *PrestoThriftRangeValueSet) GetRanges() []*PrestoThriftRange {
  return p.Ranges
}
func (p *PrestoThriftRangeValueSet) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *PrestoThriftRangeValueSet)  ReadField1(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*PrestoThriftRange, 0, size)
  p.Ranges =  tSlice
  for i := 0; i < size; i ++ {
    _elem26 := &PrestoThriftRange{}
    if err := _elem26.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem26), err)
    }
    p.Ranges = append(p.Ranges, _elem26)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *PrestoThriftRangeValueSet) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("PrestoThriftRangeValueSet"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *PrestoThriftRangeValueSet) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("ranges", thrift.LIST, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ranges: ", p), err) }
  if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Ranges)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Ranges {
    if err := v.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ranges: ", p), err) }
  return err
}

func (p *PrestoThriftRangeValueSet) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("PrestoThriftRangeValueSet(%+v)", *p)
}

// Attributes:
//  - AllOrNoneValueSet
//  - EquatableValueSet
//  - RangeValueSet
type PrestoThriftValueSet struct {
  AllOrNoneValueSet *PrestoThriftAllOrNoneValueSet `thrift:"allOrNoneValueSet,1" db:"allOrNoneValueSet" json:"allOrNoneValueSet,omitempty"`
  EquatableValueSet *PrestoThriftEquatableValueSet `thrift:"equatableValueSet,2" db:"equatableValueSet" json:"equatableValueSet,omitempty"`
  RangeValueSet *PrestoThriftRangeValueSet `thrift:"rangeValueSet,3" db:"rangeValueSet" json:"rangeValueSet,omitempty"`
}

func NewPrestoThriftValueSet() *PrestoThriftValueSet {
  return &PrestoThriftValueSet{}
}

var PrestoThriftValueSet_AllOrNoneValueSet_DEFAULT *PrestoThriftAllOrNoneValueSet
func (p *PrestoThriftValueSet) GetAllOrNoneValueSet() *PrestoThriftAllOrNoneValueSet {
  if !p.IsSetAllOrNoneValueSet() {
    return PrestoThriftValueSet_AllOrNoneValueSet_DEFAULT
  }
return p.AllOrNoneValueSet
}
var PrestoThriftValueSet_EquatableValueSet_DEFAULT *PrestoThriftEquatableValueSet
func (p *PrestoThriftValueSet) GetEquatableValueSet() *PrestoThriftEquatableValueSet {
  if !p.IsSetEquatableValueSet() {
    return PrestoThriftValueSet_EquatableValueSet_DEFAULT
  }
return p.EquatableValueSet
}
var PrestoThriftValueSet_RangeValueSet_DEFAULT *PrestoThriftRangeValueSet
func (p *PrestoThriftValueSet) GetRangeValueSet() *PrestoThriftRangeValueSet {
  if !p.IsSetRangeValueSet() {
    return PrestoThriftValueSet_RangeValueSet_DEFAULT
  }
return p.RangeValueSet
}
func (p *PrestoThriftValueSet) IsSetAllOrNoneValueSet() bool {
  return p.AllOrNoneValueSet != nil
}

func (p *PrestoThriftValueSet) IsSetEquatableValueSet() bool {
  return p.EquatableValueSet != nil
}

func (p *PrestoThriftValueSet) IsSetRangeValueSet() bool {
  return p.RangeValueSet != nil
}

func (p *PrestoThriftValueSet) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *PrestoThriftValueSet)  ReadField1(iprot thrift.TProtocol) error {
  p.AllOrNoneValueSet = &PrestoThriftAllOrNoneValueSet{}
  if err := p.AllOrNoneValueSet.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.AllOrNoneValueSet), err)
  }
  return nil
}

func (p *PrestoThriftValueSet)  ReadField2(iprot thrift.TProtocol) error {
  p.EquatableValueSet = &PrestoThriftEquatableValueSet{}
  if err := p.EquatableValueSet.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.EquatableValueSet), err)
  }
  return nil
}

func (p *PrestoThriftValueSet)  ReadField3(iprot thrift.TProtocol) error {
  p.RangeValueSet = &PrestoThriftRangeValueSet{}
  if err := p.RangeValueSet.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.RangeValueSet), err)
  }
  return nil
}

func (p *PrestoThriftValueSet) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("PrestoThriftValueSet"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *PrestoThriftValueSet) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetAllOrNoneValueSet() {
    if err := oprot.WriteFieldBegin("allOrNoneValueSet", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:allOrNoneValueSet: ", p), err) }
    if err := p.AllOrNoneValueSet.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.AllOrNoneValueSet), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:allOrNoneValueSet: ", p), err) }
  }
  return err
}

func (p *PrestoThriftValueSet) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetEquatableValueSet() {
    if err := oprot.WriteFieldBegin("equatableValueSet", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:equatableValueSet: ", p), err) }
    if err := p.EquatableValueSet.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.EquatableValueSet), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:equatableValueSet: ", p), err) }
  }
  return err
}

func (p *PrestoThriftValueSet) writeField3(oprot thrift.TProtocol) (err error) {
  if p.IsSetRangeValueSet() {
    if err := oprot.WriteFieldBegin("rangeValueSet", thrift.STRUCT, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:rangeValueSet: ", p), err) }
    if err := p.RangeValueSet.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.RangeValueSet), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:rangeValueSet: ", p), err) }
  }
  return err
}

func (p *PrestoThriftValueSet) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("PrestoThriftValueSet(%+v)", *p)
}

// Attributes:
//  - ValueSet
//  - NullAllowed
type PrestoThriftDomain struct {
  ValueSet *PrestoThriftValueSet `thrift:"valueSet,1" db:"valueSet" json:"valueSet"`
  NullAllowed bool `thrift:"nullAllowed,2" db:"nullAllowed" json:"nullAllowed"`
}

func NewPrestoThriftDomain() *PrestoThriftDomain {
  return &PrestoThriftDomain{}
}

var PrestoThriftDomain_ValueSet_DEFAULT *PrestoThriftValueSet
func (p *PrestoThriftDomain) GetValueSet() *PrestoThriftValueSet {
  if !p.IsSetValueSet() {
    return PrestoThriftDomain_ValueSet_DEFAULT
  }
return p.ValueSet
}

func (p *PrestoThriftDomain) GetNullAllowed() bool {
  return p.NullAllowed
}
func (p *PrestoThriftDomain) IsSetValueSet() bool {
  return p.ValueSet != nil
}

func (p *PrestoThriftDomain) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *PrestoThriftDomain)  ReadField1(iprot thrift.TProtocol) error {
  p.ValueSet = &PrestoThriftValueSet{}
  if err := p.ValueSet.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.ValueSet), err)
  }
  return nil
}

func (p *PrestoThriftDomain)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.NullAllowed = v
}
  return nil
}

func (p *PrestoThriftDomain) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("PrestoThriftDomain"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *PrestoThriftDomain) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("valueSet", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:valueSet: ", p), err) }
  if err := p.ValueSet.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.ValueSet), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:valueSet: ", p), err) }
  return err
}

func (p *PrestoThriftDomain) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("nullAllowed", thrift.BOOL, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:nullAllowed: ", p), err) }
  if err := oprot.WriteBool(bool(p.NullAllowed)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.nullAllowed (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:nullAllowed: ", p), err) }
  return err
}

func (p *PrestoThriftDomain) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("PrestoThriftDomain(%+v)", *p)
}

// Attributes:
//  - Domains: Return a map of column names to constraints.
type PrestoThriftTupleDomain struct {
  Domains map[string]*PrestoThriftDomain `thrift:"domains,1" db:"domains" json:"domains,omitempty"`
}

func NewPrestoThriftTupleDomain() *PrestoThriftTupleDomain {
  return &PrestoThriftTupleDomain{}
}

var PrestoThriftTupleDomain_Domains_DEFAULT map[string]*PrestoThriftDomain

func (p *PrestoThriftTupleDomain) GetDomains() map[string]*PrestoThriftDomain {
  return p.Domains
}
func (p *PrestoThriftTupleDomain) IsSetDomains() bool {
  return p.Domains != nil
}

func (p *PrestoThriftTupleDomain) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.MAP {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *PrestoThriftTupleDomain)  ReadField1(iprot thrift.TProtocol) error {
  _, _, size, err := iprot.ReadMapBegin()
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[string]*PrestoThriftDomain, size)
  p.Domains =  tMap
  for i := 0; i < size; i ++ {
var _key27 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _key27 = v
}
    _val28 := &PrestoThriftDomain{}
    if err := _val28.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _val28), err)
    }
    p.Domains[_key27] = _val28
  }
  if err := iprot.ReadMapEnd(); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *PrestoThriftTupleDomain) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("PrestoThriftTupleDomain"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *PrestoThriftTupleDomain) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetDomains() {
    if err := oprot.WriteFieldBegin("domains", thrift.MAP, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:domains: ", p), err) }
    if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRUCT, len(p.Domains)); err != nil {
      return thrift.PrependError("error writing map begin: ", err)
    }
    for k, v := range p.Domains {
      if err := oprot.WriteString(string(k)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
      if err := v.Write(oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteMapEnd(); err != nil {
      return thrift.PrependError("error writing map end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:domains: ", p), err) }
  }
  return err
}

func (p *PrestoThriftTupleDomain) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("PrestoThriftTupleDomain(%+v)", *p)
}

type PrestoThriftService interface {  //Presto Thrift service definition.
  //This thrift service needs to be implemented in order to be used with Thrift Connector.

  // Returns available schema names.
  PrestoListSchemaNames(ctx context.Context, ) (r []string, err error)
  // Returns tables for the given schema name.
  //
  // @param schemaNameOrNull a structure containing schema name or {@literal null}
  // @return a list of table names with corresponding schemas. If schema name is null then returns
  // a list of tables for all schemas. Returns an empty list if a schema does not exist
  //
  // Parameters:
  //  - SchemaNameOrNull
  PrestoListTables(ctx context.Context, schemaNameOrNull *PrestoThriftNullableSchemaName) (r []*PrestoThriftSchemaTableName, err error)
  // Returns metadata for a given table.
  //
  // @param schemaTableName schema and table name
  // @return metadata for a given table, or a {@literal null} value inside if it does not exist
  //
  // Parameters:
  //  - SchemaTableName
  PrestoGetTableMetadata(ctx context.Context, schemaTableName *PrestoThriftSchemaTableName) (r *PrestoThriftNullableTableMetadata, err error)
  // Returns a batch of splits.
  //
  // @param schemaTableName schema and table name
  // @param desiredColumns a superset of columns to return; empty set means "no columns", {@literal null} set means "all columns"
  // @param outputConstraint constraint on the returned data
  // @param maxSplitCount maximum number of splits to return
  // @param nextToken token from a previous split batch or {@literal null} if it is the first call
  // @return a batch of splits
  //
  // Parameters:
  //  - SchemaTableName
  //  - DesiredColumns
  //  - OutputConstraint
  //  - MaxSplitCount
  //  - NextToken
  PrestoGetSplits(ctx context.Context, schemaTableName *PrestoThriftSchemaTableName, desiredColumns *PrestoThriftNullableColumnSet, outputConstraint *PrestoThriftTupleDomain, maxSplitCount int32, nextToken *PrestoThriftNullableToken) (r *PrestoThriftSplitBatch, err error)
  // Returns a batch of rows for the given split.
  //
  // @param splitId split id as returned in split batch
  // @param columns a list of column names to return
  // @param maxBytes maximum size of returned data in bytes
  // @param nextToken token from a previous batch or {@literal null} if it is the first call
  // @return a batch of table data
  //
  // Parameters:
  //  - SplitId
  //  - Columns
  //  - MaxBytes
  //  - NextToken
  PrestoGetRows(ctx context.Context, splitId *PrestoThriftId, columns []string, maxBytes int64, nextToken *PrestoThriftNullableToken) (r *PrestoThriftPageResult_, err error)
}

//Presto Thrift service definition.
//This thrift service needs to be implemented in order to be used with Thrift Connector.
type PrestoThriftServiceClient struct {
  Transport thrift.TTransport
  ProtocolFactory thrift.TProtocolFactory
  InputProtocol thrift.TProtocol
  OutputProtocol thrift.TProtocol
  SeqId int32
}

func NewPrestoThriftServiceClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *PrestoThriftServiceClient {
  return &PrestoThriftServiceClient{Transport: t,
    ProtocolFactory: f,
    InputProtocol: f.GetProtocol(t),
    OutputProtocol: f.GetProtocol(t),
    SeqId: 0,
  }
}

func NewPrestoThriftServiceClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *PrestoThriftServiceClient {
  return &PrestoThriftServiceClient{Transport: t,
    ProtocolFactory: nil,
    InputProtocol: iprot,
    OutputProtocol: oprot,
    SeqId: 0,
  }
}

// Returns available schema names.
func (p *PrestoThriftServiceClient) PrestoListSchemaNames(ctx context.Context, ) (r []string, err error) {
  if err = p.sendPrestoListSchemaNames(); err != nil { return }
  return p.recvPrestoListSchemaNames()
}

func (p *PrestoThriftServiceClient) sendPrestoListSchemaNames()(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("prestoListSchemaNames", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := PrestoThriftServicePrestoListSchemaNamesArgs{
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *PrestoThriftServiceClient) recvPrestoListSchemaNames() (value []string, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "prestoListSchemaNames" {
    err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "prestoListSchemaNames failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "prestoListSchemaNames failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error29 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error30 error
    error30, err = error29.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error30
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "prestoListSchemaNames failed: invalid message type")
    return
  }
  result := PrestoThriftServicePrestoListSchemaNamesResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  if result.Ex1 != nil {
    err = result.Ex1
    return
  }
  value = result.GetSuccess()
  return
}

// Returns tables for the given schema name.
//
// @param schemaNameOrNull a structure containing schema name or {@literal null}
// @return a list of table names with corresponding schemas. If schema name is null then returns
// a list of tables for all schemas. Returns an empty list if a schema does not exist
//
// Parameters:
//  - SchemaNameOrNull
func (p *PrestoThriftServiceClient) PrestoListTables(ctx context.Context, schemaNameOrNull *PrestoThriftNullableSchemaName) (r []*PrestoThriftSchemaTableName, err error) {
  if err = p.sendPrestoListTables(schemaNameOrNull); err != nil { return }
  return p.recvPrestoListTables()
}

func (p *PrestoThriftServiceClient) sendPrestoListTables(schemaNameOrNull *PrestoThriftNullableSchemaName)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("prestoListTables", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := PrestoThriftServicePrestoListTablesArgs{
  SchemaNameOrNull : schemaNameOrNull,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *PrestoThriftServiceClient) recvPrestoListTables() (value []*PrestoThriftSchemaTableName, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "prestoListTables" {
    err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "prestoListTables failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "prestoListTables failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error31 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error32 error
    error32, err = error31.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error32
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "prestoListTables failed: invalid message type")
    return
  }
  result := PrestoThriftServicePrestoListTablesResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  if result.Ex1 != nil {
    err = result.Ex1
    return
  }
  value = result.GetSuccess()
  return
}

// Returns metadata for a given table.
//
// @param schemaTableName schema and table name
// @return metadata for a given table, or a {@literal null} value inside if it does not exist
//
// Parameters:
//  - SchemaTableName
func (p *PrestoThriftServiceClient) PrestoGetTableMetadata(ctx context.Context, schemaTableName *PrestoThriftSchemaTableName) (r *PrestoThriftNullableTableMetadata, err error) {
  if err = p.sendPrestoGetTableMetadata(schemaTableName); err != nil { return }
  return p.recvPrestoGetTableMetadata()
}

func (p *PrestoThriftServiceClient) sendPrestoGetTableMetadata(schemaTableName *PrestoThriftSchemaTableName)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("prestoGetTableMetadata", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := PrestoThriftServicePrestoGetTableMetadataArgs{
  SchemaTableName : schemaTableName,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *PrestoThriftServiceClient) recvPrestoGetTableMetadata() (value *PrestoThriftNullableTableMetadata, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "prestoGetTableMetadata" {
    err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "prestoGetTableMetadata failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "prestoGetTableMetadata failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error33 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error34 error
    error34, err = error33.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error34
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "prestoGetTableMetadata failed: invalid message type")
    return
  }
  result := PrestoThriftServicePrestoGetTableMetadataResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  if result.Ex1 != nil {
    err = result.Ex1
    return
  }
  value = result.GetSuccess()
  return
}

// Returns a batch of splits.
//
// @param schemaTableName schema and table name
// @param desiredColumns a superset of columns to return; empty set means "no columns", {@literal null} set means "all columns"
// @param outputConstraint constraint on the returned data
// @param maxSplitCount maximum number of splits to return
// @param nextToken token from a previous split batch or {@literal null} if it is the first call
// @return a batch of splits
//
// Parameters:
//  - SchemaTableName
//  - DesiredColumns
//  - OutputConstraint
//  - MaxSplitCount
//  - NextToken
func (p *PrestoThriftServiceClient) PrestoGetSplits(ctx context.Context, schemaTableName *PrestoThriftSchemaTableName, desiredColumns *PrestoThriftNullableColumnSet, outputConstraint *PrestoThriftTupleDomain, maxSplitCount int32, nextToken *PrestoThriftNullableToken) (r *PrestoThriftSplitBatch, err error) {
  if err = p.sendPrestoGetSplits(schemaTableName, desiredColumns, outputConstraint, maxSplitCount, nextToken); err != nil { return }
  return p.recvPrestoGetSplits()
}

func (p *PrestoThriftServiceClient) sendPrestoGetSplits(schemaTableName *PrestoThriftSchemaTableName, desiredColumns *PrestoThriftNullableColumnSet, outputConstraint *PrestoThriftTupleDomain, maxSplitCount int32, nextToken *PrestoThriftNullableToken)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("prestoGetSplits", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := PrestoThriftServicePrestoGetSplitsArgs{
  SchemaTableName : schemaTableName,
  DesiredColumns : desiredColumns,
  OutputConstraint : outputConstraint,
  MaxSplitCount : maxSplitCount,
  NextToken : nextToken,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *PrestoThriftServiceClient) recvPrestoGetSplits() (value *PrestoThriftSplitBatch, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "prestoGetSplits" {
    err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "prestoGetSplits failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "prestoGetSplits failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error35 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error36 error
    error36, err = error35.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error36
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "prestoGetSplits failed: invalid message type")
    return
  }
  result := PrestoThriftServicePrestoGetSplitsResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  if result.Ex1 != nil {
    err = result.Ex1
    return
  }
  value = result.GetSuccess()
  return
}

// Returns a batch of rows for the given split.
//
// @param splitId split id as returned in split batch
// @param columns a list of column names to return
// @param maxBytes maximum size of returned data in bytes
// @param nextToken token from a previous batch or {@literal null} if it is the first call
// @return a batch of table data
//
// Parameters:
//  - SplitId
//  - Columns
//  - MaxBytes
//  - NextToken
func (p *PrestoThriftServiceClient) PrestoGetRows(ctx context.Context, splitId *PrestoThriftId, columns []string, maxBytes int64, nextToken *PrestoThriftNullableToken) (r *PrestoThriftPageResult_, err error) {
  if err = p.sendPrestoGetRows(splitId, columns, maxBytes, nextToken); err != nil { return }
  return p.recvPrestoGetRows()
}

func (p *PrestoThriftServiceClient) sendPrestoGetRows(splitId *PrestoThriftId, columns []string, maxBytes int64, nextToken *PrestoThriftNullableToken)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("prestoGetRows", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := PrestoThriftServicePrestoGetRowsArgs{
  SplitId : splitId,
  Columns : columns,
  MaxBytes : maxBytes,
  NextToken : nextToken,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *PrestoThriftServiceClient) recvPrestoGetRows() (value *PrestoThriftPageResult_, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "prestoGetRows" {
    err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "prestoGetRows failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "prestoGetRows failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error37 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error38 error
    error38, err = error37.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error38
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "prestoGetRows failed: invalid message type")
    return
  }
  result := PrestoThriftServicePrestoGetRowsResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  if result.Ex1 != nil {
    err = result.Ex1
    return
  }
  value = result.GetSuccess()
  return
}


type PrestoThriftServiceProcessor struct {
  processorMap map[string]thrift.TProcessorFunction
  handler PrestoThriftService
}

func (p *PrestoThriftServiceProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
  p.processorMap[key] = processor
}

func (p *PrestoThriftServiceProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
  processor, ok = p.processorMap[key]
  return processor, ok
}

func (p *PrestoThriftServiceProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
  return p.processorMap
}

func NewPrestoThriftServiceProcessor(handler PrestoThriftService) *PrestoThriftServiceProcessor {

  self39 := &PrestoThriftServiceProcessor{handler:handler, processorMap:make(map[string]thrift.TProcessorFunction)}
  self39.processorMap["prestoListSchemaNames"] = &prestoThriftServiceProcessorPrestoListSchemaNames{handler:handler}
  self39.processorMap["prestoListTables"] = &prestoThriftServiceProcessorPrestoListTables{handler:handler}
  self39.processorMap["prestoGetTableMetadata"] = &prestoThriftServiceProcessorPrestoGetTableMetadata{handler:handler}
  self39.processorMap["prestoGetSplits"] = &prestoThriftServiceProcessorPrestoGetSplits{handler:handler}
  self39.processorMap["prestoGetRows"] = &prestoThriftServiceProcessorPrestoGetRows{handler:handler}
return self39
}

func (p *PrestoThriftServiceProcessor) Process(ctx context.Context, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  name, _, seqId, err := iprot.ReadMessageBegin()
  if err != nil { return false, err }
  if processor, ok := p.GetProcessorFunction(name); ok {
    return processor.Process(ctx, seqId, iprot, oprot)
  }
  iprot.Skip(thrift.STRUCT)
  iprot.ReadMessageEnd()
  x40 := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function " + name)
  oprot.WriteMessageBegin(name, thrift.EXCEPTION, seqId)
  x40.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Flush()
  return false, x40

}

type prestoThriftServiceProcessorPrestoListSchemaNames struct {
  handler PrestoThriftService
}

func (p *prestoThriftServiceProcessorPrestoListSchemaNames) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := PrestoThriftServicePrestoListSchemaNamesArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("prestoListSchemaNames", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := PrestoThriftServicePrestoListSchemaNamesResult{}
var retval []string
  var err2 error
  if retval, err2 = p.handler.PrestoListSchemaNames(ctx); err2 != nil {
  switch v := err2.(type) {
    case *PrestoThriftServiceException:
  result.Ex1 = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing prestoListSchemaNames: " + err2.Error())
    oprot.WriteMessageBegin("prestoListSchemaNames", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  }
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("prestoListSchemaNames", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type prestoThriftServiceProcessorPrestoListTables struct {
  handler PrestoThriftService
}

func (p *prestoThriftServiceProcessorPrestoListTables) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := PrestoThriftServicePrestoListTablesArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("prestoListTables", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := PrestoThriftServicePrestoListTablesResult{}
var retval []*PrestoThriftSchemaTableName
  var err2 error
  if retval, err2 = p.handler.PrestoListTables(ctx, args.SchemaNameOrNull); err2 != nil {
  switch v := err2.(type) {
    case *PrestoThriftServiceException:
  result.Ex1 = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing prestoListTables: " + err2.Error())
    oprot.WriteMessageBegin("prestoListTables", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  }
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("prestoListTables", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type prestoThriftServiceProcessorPrestoGetTableMetadata struct {
  handler PrestoThriftService
}

func (p *prestoThriftServiceProcessorPrestoGetTableMetadata) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := PrestoThriftServicePrestoGetTableMetadataArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("prestoGetTableMetadata", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := PrestoThriftServicePrestoGetTableMetadataResult{}
var retval *PrestoThriftNullableTableMetadata
  var err2 error
  if retval, err2 = p.handler.PrestoGetTableMetadata(ctx, args.SchemaTableName); err2 != nil {
  switch v := err2.(type) {
    case *PrestoThriftServiceException:
  result.Ex1 = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing prestoGetTableMetadata: " + err2.Error())
    oprot.WriteMessageBegin("prestoGetTableMetadata", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  }
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("prestoGetTableMetadata", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type prestoThriftServiceProcessorPrestoGetSplits struct {
  handler PrestoThriftService
}

func (p *prestoThriftServiceProcessorPrestoGetSplits) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := PrestoThriftServicePrestoGetSplitsArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("prestoGetSplits", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := PrestoThriftServicePrestoGetSplitsResult{}
var retval *PrestoThriftSplitBatch
  var err2 error
  if retval, err2 = p.handler.PrestoGetSplits(ctx, args.SchemaTableName, args.DesiredColumns, args.OutputConstraint, args.MaxSplitCount, args.NextToken); err2 != nil {
  switch v := err2.(type) {
    case *PrestoThriftServiceException:
  result.Ex1 = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing prestoGetSplits: " + err2.Error())
    oprot.WriteMessageBegin("prestoGetSplits", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  }
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("prestoGetSplits", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type prestoThriftServiceProcessorPrestoGetRows struct {
  handler PrestoThriftService
}

func (p *prestoThriftServiceProcessorPrestoGetRows) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := PrestoThriftServicePrestoGetRowsArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("prestoGetRows", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := PrestoThriftServicePrestoGetRowsResult{}
var retval *PrestoThriftPageResult_
  var err2 error
  if retval, err2 = p.handler.PrestoGetRows(ctx, args.SplitId, args.Columns, args.MaxBytes, args.NextToken); err2 != nil {
  switch v := err2.(type) {
    case *PrestoThriftServiceException:
  result.Ex1 = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing prestoGetRows: " + err2.Error())
    oprot.WriteMessageBegin("prestoGetRows", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  }
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("prestoGetRows", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}


// HELPER FUNCTIONS AND STRUCTURES

type PrestoThriftServicePrestoListSchemaNamesArgs struct {
}

func NewPrestoThriftServicePrestoListSchemaNamesArgs() *PrestoThriftServicePrestoListSchemaNamesArgs {
  return &PrestoThriftServicePrestoListSchemaNamesArgs{}
}

func (p *PrestoThriftServicePrestoListSchemaNamesArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if err := iprot.Skip(fieldTypeId); err != nil {
      return err
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *PrestoThriftServicePrestoListSchemaNamesArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("prestoListSchemaNames_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *PrestoThriftServicePrestoListSchemaNamesArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("PrestoThriftServicePrestoListSchemaNamesArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - Ex1
type PrestoThriftServicePrestoListSchemaNamesResult struct {
  Success []string `thrift:"success,0" db:"success" json:"success,omitempty"`
  Ex1 *PrestoThriftServiceException `thrift:"ex1,1" db:"ex1" json:"ex1,omitempty"`
}

func NewPrestoThriftServicePrestoListSchemaNamesResult() *PrestoThriftServicePrestoListSchemaNamesResult {
  return &PrestoThriftServicePrestoListSchemaNamesResult{}
}

var PrestoThriftServicePrestoListSchemaNamesResult_Success_DEFAULT []string

func (p *PrestoThriftServicePrestoListSchemaNamesResult) GetSuccess() []string {
  return p.Success
}
var PrestoThriftServicePrestoListSchemaNamesResult_Ex1_DEFAULT *PrestoThriftServiceException
func (p *PrestoThriftServicePrestoListSchemaNamesResult) GetEx1() *PrestoThriftServiceException {
  if !p.IsSetEx1() {
    return PrestoThriftServicePrestoListSchemaNamesResult_Ex1_DEFAULT
  }
return p.Ex1
}
func (p *PrestoThriftServicePrestoListSchemaNamesResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *PrestoThriftServicePrestoListSchemaNamesResult) IsSetEx1() bool {
  return p.Ex1 != nil
}

func (p *PrestoThriftServicePrestoListSchemaNamesResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *PrestoThriftServicePrestoListSchemaNamesResult)  ReadField0(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]string, 0, size)
  p.Success =  tSlice
  for i := 0; i < size; i ++ {
var _elem41 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem41 = v
}
    p.Success = append(p.Success, _elem41)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *PrestoThriftServicePrestoListSchemaNamesResult)  ReadField1(iprot thrift.TProtocol) error {
  p.Ex1 = &PrestoThriftServiceException{}
  if err := p.Ex1.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ex1), err)
  }
  return nil
}

func (p *PrestoThriftServicePrestoListSchemaNamesResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("prestoListSchemaNames_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *PrestoThriftServicePrestoListSchemaNamesResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.LIST, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteListBegin(thrift.STRING, len(p.Success)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.Success {
      if err := oprot.WriteString(string(v)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *PrestoThriftServicePrestoListSchemaNamesResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetEx1() {
    if err := oprot.WriteFieldBegin("ex1", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ex1: ", p), err) }
    if err := p.Ex1.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ex1), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ex1: ", p), err) }
  }
  return err
}

func (p *PrestoThriftServicePrestoListSchemaNamesResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("PrestoThriftServicePrestoListSchemaNamesResult(%+v)", *p)
}

// Attributes:
//  - SchemaNameOrNull
type PrestoThriftServicePrestoListTablesArgs struct {
  SchemaNameOrNull *PrestoThriftNullableSchemaName `thrift:"schemaNameOrNull,1" db:"schemaNameOrNull" json:"schemaNameOrNull"`
}

func NewPrestoThriftServicePrestoListTablesArgs() *PrestoThriftServicePrestoListTablesArgs {
  return &PrestoThriftServicePrestoListTablesArgs{}
}

var PrestoThriftServicePrestoListTablesArgs_SchemaNameOrNull_DEFAULT *PrestoThriftNullableSchemaName
func (p *PrestoThriftServicePrestoListTablesArgs) GetSchemaNameOrNull() *PrestoThriftNullableSchemaName {
  if !p.IsSetSchemaNameOrNull() {
    return PrestoThriftServicePrestoListTablesArgs_SchemaNameOrNull_DEFAULT
  }
return p.SchemaNameOrNull
}
func (p *PrestoThriftServicePrestoListTablesArgs) IsSetSchemaNameOrNull() bool {
  return p.SchemaNameOrNull != nil
}

func (p *PrestoThriftServicePrestoListTablesArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *PrestoThriftServicePrestoListTablesArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.SchemaNameOrNull = &PrestoThriftNullableSchemaName{}
  if err := p.SchemaNameOrNull.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.SchemaNameOrNull), err)
  }
  return nil
}

func (p *PrestoThriftServicePrestoListTablesArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("prestoListTables_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *PrestoThriftServicePrestoListTablesArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("schemaNameOrNull", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:schemaNameOrNull: ", p), err) }
  if err := p.SchemaNameOrNull.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.SchemaNameOrNull), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:schemaNameOrNull: ", p), err) }
  return err
}

func (p *PrestoThriftServicePrestoListTablesArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("PrestoThriftServicePrestoListTablesArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - Ex1
type PrestoThriftServicePrestoListTablesResult struct {
  Success []*PrestoThriftSchemaTableName `thrift:"success,0" db:"success" json:"success,omitempty"`
  Ex1 *PrestoThriftServiceException `thrift:"ex1,1" db:"ex1" json:"ex1,omitempty"`
}

func NewPrestoThriftServicePrestoListTablesResult() *PrestoThriftServicePrestoListTablesResult {
  return &PrestoThriftServicePrestoListTablesResult{}
}

var PrestoThriftServicePrestoListTablesResult_Success_DEFAULT []*PrestoThriftSchemaTableName

func (p *PrestoThriftServicePrestoListTablesResult) GetSuccess() []*PrestoThriftSchemaTableName {
  return p.Success
}
var PrestoThriftServicePrestoListTablesResult_Ex1_DEFAULT *PrestoThriftServiceException
func (p *PrestoThriftServicePrestoListTablesResult) GetEx1() *PrestoThriftServiceException {
  if !p.IsSetEx1() {
    return PrestoThriftServicePrestoListTablesResult_Ex1_DEFAULT
  }
return p.Ex1
}
func (p *PrestoThriftServicePrestoListTablesResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *PrestoThriftServicePrestoListTablesResult) IsSetEx1() bool {
  return p.Ex1 != nil
}

func (p *PrestoThriftServicePrestoListTablesResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *PrestoThriftServicePrestoListTablesResult)  ReadField0(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*PrestoThriftSchemaTableName, 0, size)
  p.Success =  tSlice
  for i := 0; i < size; i ++ {
    _elem42 := &PrestoThriftSchemaTableName{}
    if err := _elem42.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem42), err)
    }
    p.Success = append(p.Success, _elem42)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *PrestoThriftServicePrestoListTablesResult)  ReadField1(iprot thrift.TProtocol) error {
  p.Ex1 = &PrestoThriftServiceException{}
  if err := p.Ex1.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ex1), err)
  }
  return nil
}

func (p *PrestoThriftServicePrestoListTablesResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("prestoListTables_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *PrestoThriftServicePrestoListTablesResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.LIST, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Success)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.Success {
      if err := v.Write(oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *PrestoThriftServicePrestoListTablesResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetEx1() {
    if err := oprot.WriteFieldBegin("ex1", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ex1: ", p), err) }
    if err := p.Ex1.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ex1), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ex1: ", p), err) }
  }
  return err
}

func (p *PrestoThriftServicePrestoListTablesResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("PrestoThriftServicePrestoListTablesResult(%+v)", *p)
}

// Attributes:
//  - SchemaTableName
type PrestoThriftServicePrestoGetTableMetadataArgs struct {
  SchemaTableName *PrestoThriftSchemaTableName `thrift:"schemaTableName,1" db:"schemaTableName" json:"schemaTableName"`
}

func NewPrestoThriftServicePrestoGetTableMetadataArgs() *PrestoThriftServicePrestoGetTableMetadataArgs {
  return &PrestoThriftServicePrestoGetTableMetadataArgs{}
}

var PrestoThriftServicePrestoGetTableMetadataArgs_SchemaTableName_DEFAULT *PrestoThriftSchemaTableName
func (p *PrestoThriftServicePrestoGetTableMetadataArgs) GetSchemaTableName() *PrestoThriftSchemaTableName {
  if !p.IsSetSchemaTableName() {
    return PrestoThriftServicePrestoGetTableMetadataArgs_SchemaTableName_DEFAULT
  }
return p.SchemaTableName
}
func (p *PrestoThriftServicePrestoGetTableMetadataArgs) IsSetSchemaTableName() bool {
  return p.SchemaTableName != nil
}

func (p *PrestoThriftServicePrestoGetTableMetadataArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *PrestoThriftServicePrestoGetTableMetadataArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.SchemaTableName = &PrestoThriftSchemaTableName{}
  if err := p.SchemaTableName.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.SchemaTableName), err)
  }
  return nil
}

func (p *PrestoThriftServicePrestoGetTableMetadataArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("prestoGetTableMetadata_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *PrestoThriftServicePrestoGetTableMetadataArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("schemaTableName", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:schemaTableName: ", p), err) }
  if err := p.SchemaTableName.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.SchemaTableName), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:schemaTableName: ", p), err) }
  return err
}

func (p *PrestoThriftServicePrestoGetTableMetadataArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("PrestoThriftServicePrestoGetTableMetadataArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - Ex1
type PrestoThriftServicePrestoGetTableMetadataResult struct {
  Success *PrestoThriftNullableTableMetadata `thrift:"success,0" db:"success" json:"success,omitempty"`
  Ex1 *PrestoThriftServiceException `thrift:"ex1,1" db:"ex1" json:"ex1,omitempty"`
}

func NewPrestoThriftServicePrestoGetTableMetadataResult() *PrestoThriftServicePrestoGetTableMetadataResult {
  return &PrestoThriftServicePrestoGetTableMetadataResult{}
}

var PrestoThriftServicePrestoGetTableMetadataResult_Success_DEFAULT *PrestoThriftNullableTableMetadata
func (p *PrestoThriftServicePrestoGetTableMetadataResult) GetSuccess() *PrestoThriftNullableTableMetadata {
  if !p.IsSetSuccess() {
    return PrestoThriftServicePrestoGetTableMetadataResult_Success_DEFAULT
  }
return p.Success
}
var PrestoThriftServicePrestoGetTableMetadataResult_Ex1_DEFAULT *PrestoThriftServiceException
func (p *PrestoThriftServicePrestoGetTableMetadataResult) GetEx1() *PrestoThriftServiceException {
  if !p.IsSetEx1() {
    return PrestoThriftServicePrestoGetTableMetadataResult_Ex1_DEFAULT
  }
return p.Ex1
}
func (p *PrestoThriftServicePrestoGetTableMetadataResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *PrestoThriftServicePrestoGetTableMetadataResult) IsSetEx1() bool {
  return p.Ex1 != nil
}

func (p *PrestoThriftServicePrestoGetTableMetadataResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *PrestoThriftServicePrestoGetTableMetadataResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &PrestoThriftNullableTableMetadata{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *PrestoThriftServicePrestoGetTableMetadataResult)  ReadField1(iprot thrift.TProtocol) error {
  p.Ex1 = &PrestoThriftServiceException{}
  if err := p.Ex1.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ex1), err)
  }
  return nil
}

func (p *PrestoThriftServicePrestoGetTableMetadataResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("prestoGetTableMetadata_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *PrestoThriftServicePrestoGetTableMetadataResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *PrestoThriftServicePrestoGetTableMetadataResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetEx1() {
    if err := oprot.WriteFieldBegin("ex1", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ex1: ", p), err) }
    if err := p.Ex1.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ex1), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ex1: ", p), err) }
  }
  return err
}

func (p *PrestoThriftServicePrestoGetTableMetadataResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("PrestoThriftServicePrestoGetTableMetadataResult(%+v)", *p)
}

// Attributes:
//  - SchemaTableName
//  - DesiredColumns
//  - OutputConstraint
//  - MaxSplitCount
//  - NextToken
type PrestoThriftServicePrestoGetSplitsArgs struct {
  SchemaTableName *PrestoThriftSchemaTableName `thrift:"schemaTableName,1" db:"schemaTableName" json:"schemaTableName"`
  DesiredColumns *PrestoThriftNullableColumnSet `thrift:"desiredColumns,2" db:"desiredColumns" json:"desiredColumns"`
  OutputConstraint *PrestoThriftTupleDomain `thrift:"outputConstraint,3" db:"outputConstraint" json:"outputConstraint"`
  MaxSplitCount int32 `thrift:"maxSplitCount,4" db:"maxSplitCount" json:"maxSplitCount"`
  NextToken *PrestoThriftNullableToken `thrift:"nextToken,5" db:"nextToken" json:"nextToken"`
}

func NewPrestoThriftServicePrestoGetSplitsArgs() *PrestoThriftServicePrestoGetSplitsArgs {
  return &PrestoThriftServicePrestoGetSplitsArgs{}
}

var PrestoThriftServicePrestoGetSplitsArgs_SchemaTableName_DEFAULT *PrestoThriftSchemaTableName
func (p *PrestoThriftServicePrestoGetSplitsArgs) GetSchemaTableName() *PrestoThriftSchemaTableName {
  if !p.IsSetSchemaTableName() {
    return PrestoThriftServicePrestoGetSplitsArgs_SchemaTableName_DEFAULT
  }
return p.SchemaTableName
}
var PrestoThriftServicePrestoGetSplitsArgs_DesiredColumns_DEFAULT *PrestoThriftNullableColumnSet
func (p *PrestoThriftServicePrestoGetSplitsArgs) GetDesiredColumns() *PrestoThriftNullableColumnSet {
  if !p.IsSetDesiredColumns() {
    return PrestoThriftServicePrestoGetSplitsArgs_DesiredColumns_DEFAULT
  }
return p.DesiredColumns
}
var PrestoThriftServicePrestoGetSplitsArgs_OutputConstraint_DEFAULT *PrestoThriftTupleDomain
func (p *PrestoThriftServicePrestoGetSplitsArgs) GetOutputConstraint() *PrestoThriftTupleDomain {
  if !p.IsSetOutputConstraint() {
    return PrestoThriftServicePrestoGetSplitsArgs_OutputConstraint_DEFAULT
  }
return p.OutputConstraint
}

func (p *PrestoThriftServicePrestoGetSplitsArgs) GetMaxSplitCount() int32 {
  return p.MaxSplitCount
}
var PrestoThriftServicePrestoGetSplitsArgs_NextToken_DEFAULT *PrestoThriftNullableToken
func (p *PrestoThriftServicePrestoGetSplitsArgs) GetNextToken() *PrestoThriftNullableToken {
  if !p.IsSetNextToken() {
    return PrestoThriftServicePrestoGetSplitsArgs_NextToken_DEFAULT
  }
return p.NextToken
}
func (p *PrestoThriftServicePrestoGetSplitsArgs) IsSetSchemaTableName() bool {
  return p.SchemaTableName != nil
}

func (p *PrestoThriftServicePrestoGetSplitsArgs) IsSetDesiredColumns() bool {
  return p.DesiredColumns != nil
}

func (p *PrestoThriftServicePrestoGetSplitsArgs) IsSetOutputConstraint() bool {
  return p.OutputConstraint != nil
}

func (p *PrestoThriftServicePrestoGetSplitsArgs) IsSetNextToken() bool {
  return p.NextToken != nil
}

func (p *PrestoThriftServicePrestoGetSplitsArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField5(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *PrestoThriftServicePrestoGetSplitsArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.SchemaTableName = &PrestoThriftSchemaTableName{}
  if err := p.SchemaTableName.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.SchemaTableName), err)
  }
  return nil
}

func (p *PrestoThriftServicePrestoGetSplitsArgs)  ReadField2(iprot thrift.TProtocol) error {
  p.DesiredColumns = &PrestoThriftNullableColumnSet{}
  if err := p.DesiredColumns.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.DesiredColumns), err)
  }
  return nil
}

func (p *PrestoThriftServicePrestoGetSplitsArgs)  ReadField3(iprot thrift.TProtocol) error {
  p.OutputConstraint = &PrestoThriftTupleDomain{}
  if err := p.OutputConstraint.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.OutputConstraint), err)
  }
  return nil
}

func (p *PrestoThriftServicePrestoGetSplitsArgs)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.MaxSplitCount = v
}
  return nil
}

func (p *PrestoThriftServicePrestoGetSplitsArgs)  ReadField5(iprot thrift.TProtocol) error {
  p.NextToken = &PrestoThriftNullableToken{}
  if err := p.NextToken.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.NextToken), err)
  }
  return nil
}

func (p *PrestoThriftServicePrestoGetSplitsArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("prestoGetSplits_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *PrestoThriftServicePrestoGetSplitsArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("schemaTableName", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:schemaTableName: ", p), err) }
  if err := p.SchemaTableName.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.SchemaTableName), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:schemaTableName: ", p), err) }
  return err
}

func (p *PrestoThriftServicePrestoGetSplitsArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("desiredColumns", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:desiredColumns: ", p), err) }
  if err := p.DesiredColumns.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.DesiredColumns), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:desiredColumns: ", p), err) }
  return err
}

func (p *PrestoThriftServicePrestoGetSplitsArgs) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("outputConstraint", thrift.STRUCT, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:outputConstraint: ", p), err) }
  if err := p.OutputConstraint.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.OutputConstraint), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:outputConstraint: ", p), err) }
  return err
}

func (p *PrestoThriftServicePrestoGetSplitsArgs) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("maxSplitCount", thrift.I32, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:maxSplitCount: ", p), err) }
  if err := oprot.WriteI32(int32(p.MaxSplitCount)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.maxSplitCount (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:maxSplitCount: ", p), err) }
  return err
}

func (p *PrestoThriftServicePrestoGetSplitsArgs) writeField5(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("nextToken", thrift.STRUCT, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:nextToken: ", p), err) }
  if err := p.NextToken.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.NextToken), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:nextToken: ", p), err) }
  return err
}

func (p *PrestoThriftServicePrestoGetSplitsArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("PrestoThriftServicePrestoGetSplitsArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - Ex1
type PrestoThriftServicePrestoGetSplitsResult struct {
  Success *PrestoThriftSplitBatch `thrift:"success,0" db:"success" json:"success,omitempty"`
  Ex1 *PrestoThriftServiceException `thrift:"ex1,1" db:"ex1" json:"ex1,omitempty"`
}

func NewPrestoThriftServicePrestoGetSplitsResult() *PrestoThriftServicePrestoGetSplitsResult {
  return &PrestoThriftServicePrestoGetSplitsResult{}
}

var PrestoThriftServicePrestoGetSplitsResult_Success_DEFAULT *PrestoThriftSplitBatch
func (p *PrestoThriftServicePrestoGetSplitsResult) GetSuccess() *PrestoThriftSplitBatch {
  if !p.IsSetSuccess() {
    return PrestoThriftServicePrestoGetSplitsResult_Success_DEFAULT
  }
return p.Success
}
var PrestoThriftServicePrestoGetSplitsResult_Ex1_DEFAULT *PrestoThriftServiceException
func (p *PrestoThriftServicePrestoGetSplitsResult) GetEx1() *PrestoThriftServiceException {
  if !p.IsSetEx1() {
    return PrestoThriftServicePrestoGetSplitsResult_Ex1_DEFAULT
  }
return p.Ex1
}
func (p *PrestoThriftServicePrestoGetSplitsResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *PrestoThriftServicePrestoGetSplitsResult) IsSetEx1() bool {
  return p.Ex1 != nil
}

func (p *PrestoThriftServicePrestoGetSplitsResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *PrestoThriftServicePrestoGetSplitsResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &PrestoThriftSplitBatch{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *PrestoThriftServicePrestoGetSplitsResult)  ReadField1(iprot thrift.TProtocol) error {
  p.Ex1 = &PrestoThriftServiceException{}
  if err := p.Ex1.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ex1), err)
  }
  return nil
}

func (p *PrestoThriftServicePrestoGetSplitsResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("prestoGetSplits_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *PrestoThriftServicePrestoGetSplitsResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *PrestoThriftServicePrestoGetSplitsResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetEx1() {
    if err := oprot.WriteFieldBegin("ex1", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ex1: ", p), err) }
    if err := p.Ex1.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ex1), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ex1: ", p), err) }
  }
  return err
}

func (p *PrestoThriftServicePrestoGetSplitsResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("PrestoThriftServicePrestoGetSplitsResult(%+v)", *p)
}

// Attributes:
//  - SplitId
//  - Columns
//  - MaxBytes
//  - NextToken
type PrestoThriftServicePrestoGetRowsArgs struct {
  SplitId *PrestoThriftId `thrift:"splitId,1" db:"splitId" json:"splitId"`
  Columns []string `thrift:"columns,2" db:"columns" json:"columns"`
  MaxBytes int64 `thrift:"maxBytes,3" db:"maxBytes" json:"maxBytes"`
  NextToken *PrestoThriftNullableToken `thrift:"nextToken,4" db:"nextToken" json:"nextToken"`
}

func NewPrestoThriftServicePrestoGetRowsArgs() *PrestoThriftServicePrestoGetRowsArgs {
  return &PrestoThriftServicePrestoGetRowsArgs{}
}

var PrestoThriftServicePrestoGetRowsArgs_SplitId_DEFAULT *PrestoThriftId
func (p *PrestoThriftServicePrestoGetRowsArgs) GetSplitId() *PrestoThriftId {
  if !p.IsSetSplitId() {
    return PrestoThriftServicePrestoGetRowsArgs_SplitId_DEFAULT
  }
return p.SplitId
}

func (p *PrestoThriftServicePrestoGetRowsArgs) GetColumns() []string {
  return p.Columns
}

func (p *PrestoThriftServicePrestoGetRowsArgs) GetMaxBytes() int64 {
  return p.MaxBytes
}
var PrestoThriftServicePrestoGetRowsArgs_NextToken_DEFAULT *PrestoThriftNullableToken
func (p *PrestoThriftServicePrestoGetRowsArgs) GetNextToken() *PrestoThriftNullableToken {
  if !p.IsSetNextToken() {
    return PrestoThriftServicePrestoGetRowsArgs_NextToken_DEFAULT
  }
return p.NextToken
}
func (p *PrestoThriftServicePrestoGetRowsArgs) IsSetSplitId() bool {
  return p.SplitId != nil
}

func (p *PrestoThriftServicePrestoGetRowsArgs) IsSetNextToken() bool {
  return p.NextToken != nil
}

func (p *PrestoThriftServicePrestoGetRowsArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *PrestoThriftServicePrestoGetRowsArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.SplitId = &PrestoThriftId{}
  if err := p.SplitId.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.SplitId), err)
  }
  return nil
}

func (p *PrestoThriftServicePrestoGetRowsArgs)  ReadField2(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]string, 0, size)
  p.Columns =  tSlice
  for i := 0; i < size; i ++ {
var _elem43 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem43 = v
}
    p.Columns = append(p.Columns, _elem43)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *PrestoThriftServicePrestoGetRowsArgs)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.MaxBytes = v
}
  return nil
}

func (p *PrestoThriftServicePrestoGetRowsArgs)  ReadField4(iprot thrift.TProtocol) error {
  p.NextToken = &PrestoThriftNullableToken{}
  if err := p.NextToken.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.NextToken), err)
  }
  return nil
}

func (p *PrestoThriftServicePrestoGetRowsArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("prestoGetRows_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *PrestoThriftServicePrestoGetRowsArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("splitId", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:splitId: ", p), err) }
  if err := p.SplitId.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.SplitId), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:splitId: ", p), err) }
  return err
}

func (p *PrestoThriftServicePrestoGetRowsArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("columns", thrift.LIST, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:columns: ", p), err) }
  if err := oprot.WriteListBegin(thrift.STRING, len(p.Columns)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Columns {
    if err := oprot.WriteString(string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:columns: ", p), err) }
  return err
}

func (p *PrestoThriftServicePrestoGetRowsArgs) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("maxBytes", thrift.I64, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:maxBytes: ", p), err) }
  if err := oprot.WriteI64(int64(p.MaxBytes)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.maxBytes (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:maxBytes: ", p), err) }
  return err
}

func (p *PrestoThriftServicePrestoGetRowsArgs) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("nextToken", thrift.STRUCT, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:nextToken: ", p), err) }
  if err := p.NextToken.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.NextToken), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:nextToken: ", p), err) }
  return err
}

func (p *PrestoThriftServicePrestoGetRowsArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("PrestoThriftServicePrestoGetRowsArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - Ex1
type PrestoThriftServicePrestoGetRowsResult struct {
  Success *PrestoThriftPageResult_ `thrift:"success,0" db:"success" json:"success,omitempty"`
  Ex1 *PrestoThriftServiceException `thrift:"ex1,1" db:"ex1" json:"ex1,omitempty"`
}

func NewPrestoThriftServicePrestoGetRowsResult() *PrestoThriftServicePrestoGetRowsResult {
  return &PrestoThriftServicePrestoGetRowsResult{}
}

var PrestoThriftServicePrestoGetRowsResult_Success_DEFAULT *PrestoThriftPageResult_
func (p *PrestoThriftServicePrestoGetRowsResult) GetSuccess() *PrestoThriftPageResult_ {
  if !p.IsSetSuccess() {
    return PrestoThriftServicePrestoGetRowsResult_Success_DEFAULT
  }
return p.Success
}
var PrestoThriftServicePrestoGetRowsResult_Ex1_DEFAULT *PrestoThriftServiceException
func (p *PrestoThriftServicePrestoGetRowsResult) GetEx1() *PrestoThriftServiceException {
  if !p.IsSetEx1() {
    return PrestoThriftServicePrestoGetRowsResult_Ex1_DEFAULT
  }
return p.Ex1
}
func (p *PrestoThriftServicePrestoGetRowsResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *PrestoThriftServicePrestoGetRowsResult) IsSetEx1() bool {
  return p.Ex1 != nil
}

func (p *PrestoThriftServicePrestoGetRowsResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *PrestoThriftServicePrestoGetRowsResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &PrestoThriftPageResult_{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *PrestoThriftServicePrestoGetRowsResult)  ReadField1(iprot thrift.TProtocol) error {
  p.Ex1 = &PrestoThriftServiceException{}
  if err := p.Ex1.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ex1), err)
  }
  return nil
}

func (p *PrestoThriftServicePrestoGetRowsResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("prestoGetRows_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *PrestoThriftServicePrestoGetRowsResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *PrestoThriftServicePrestoGetRowsResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetEx1() {
    if err := oprot.WriteFieldBegin("ex1", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ex1: ", p), err) }
    if err := p.Ex1.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ex1), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ex1: ", p), err) }
  }
  return err
}

func (p *PrestoThriftServicePrestoGetRowsResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("PrestoThriftServicePrestoGetRowsResult(%+v)", *p)
}
